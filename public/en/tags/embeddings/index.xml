<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" 
    xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Embeddings on Çağatay Türkan</title>
    <link>https://cagatayturkan.com/blog/en/tags/embeddings/</link>
    <description>Recent content in Embeddings on Çağatay Türkan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Mar 2025 12:00:00 +0300</lastBuildDate><atom:link href="https://cagatayturkan.com/blog/en/tags/embeddings/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vector Databases and Weaviate: Building Semantic Search Applications</title>
      <link>https://cagatayturkan.com/blog/en/vector-databases-weaviate/</link>
      <pubDate>Fri, 14 Mar 2025 12:00:00 +0300</pubDate>
      
      <guid>https://cagatayturkan.com/blog/en/vector-databases-weaviate/</guid>
      <description>This article explores vector databases with a focus on Weaviate, covering fundamental concepts, architecture, and implementation strategies. Learn how vector databases enable semantic search capabilities, their advantages over traditional databases, and how to build powerful search applications with Weaviate.</description>
      
      <cardimage>https://cagatayturkan.com/blog/en/vector-databases-weaviate/images/cover.svg</cardimage>
      
      
      <featureimage>https://cagatayturkan.com/blog/en/vector-databases-weaviate/images/cover.svg</featureimage>
      
      <content:encoded>&lt;h1 id=&#34;vector-databases-and-weaviate-building-semantic-search-applications&#34;&gt;Vector Databases and Weaviate: Building Semantic Search Applications&lt;/h1&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In the ever-evolving landscape of data storage and retrieval systems, vector databases have emerged as a revolutionary technology that bridges the gap between traditional databases and modern AI applications. Unlike conventional databases that excel at exact matches and structured queries, vector databases are designed to understand the meaning and context behind data, enabling similarity-based search capabilities that power next-generation applications.&lt;/p&gt;
&lt;p&gt;In this article, we&amp;rsquo;ll explore:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The fundamental concepts behind vector databases and how they differ from traditional systems&lt;/li&gt;
&lt;li&gt;The architecture and key components of vector databases&lt;/li&gt;
&lt;li&gt;An in-depth look at Weaviate, one of the leading open-source vector database platforms&lt;/li&gt;
&lt;li&gt;How to implement powerful semantic search applications with Weaviate&lt;/li&gt;
&lt;li&gt;Best practices, optimization strategies, and real-world use cases&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whether you&amp;rsquo;re new to vector databases or looking to enhance your existing knowledge, this guide will provide the theoretical foundation you need to understand and leverage this powerful technology.&lt;/p&gt;
&lt;h2 id=&#34;1-understanding-vector-databases-the-fundamentals&#34;&gt;1. Understanding Vector Databases: The Fundamentals&lt;/h2&gt;
&lt;h3 id=&#34;what-are-vector-databases&#34;&gt;What Are Vector Databases?&lt;/h3&gt;
&lt;p&gt;A vector database is a specialized database system designed to store, manage, and query high-dimensional vector representations of data. These vectors (also called embeddings) capture the semantic meaning of items such as text, images, audio, or any other data that can be represented in a numerical format.&lt;/p&gt;
&lt;p&gt;The core idea behind vector databases is simple yet powerful: by converting data into vectors that preserve semantic relationships, we can perform similarity searches based on meaning rather than exact matches. This enables a wide range of applications that were previously difficult or impossible with traditional database systems.&lt;/p&gt;
&lt;h3 id=&#34;vector-embeddings-the-building-blocks&#34;&gt;Vector Embeddings: The Building Blocks&lt;/h3&gt;
&lt;p&gt;At the heart of vector databases are embeddings—numerical representations of data in a high-dimensional space. Here&amp;rsquo;s how they work:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Embedding Generation&lt;/strong&gt;: Data (such as text, images, or audio) is processed through an embedding model that converts it into a vector of floating-point numbers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dimensional Representation&lt;/strong&gt;: These vectors typically have hundreds or thousands of dimensions, with each dimension capturing some aspect of the data&amp;rsquo;s semantic properties.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Semantic Proximity&lt;/strong&gt;: Items with similar meanings or characteristics are positioned close to each other in this high-dimensional space.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example, in a text embedding space, the words &amp;ldquo;happy&amp;rdquo; and &amp;ldquo;joyful&amp;rdquo; would be positioned closer to each other than &amp;ldquo;happy&amp;rdquo; and &amp;ldquo;automobile&amp;rdquo; because they share more semantic similarity.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;./images/vectorEmbeddings.svg.png&#34;
    alt=&#34;Illustration of text embeddings in vector space&#34;&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;vector-databases-vs-traditional-databases&#34;&gt;Vector Databases vs. Traditional Databases&lt;/h3&gt;
&lt;p&gt;To appreciate the value of vector databases, it&amp;rsquo;s important to understand how they differ from traditional database systems:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Feature&lt;/th&gt;
          &lt;th&gt;Traditional Databases&lt;/th&gt;
          &lt;th&gt;Vector Databases&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Data Storage&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Structured records, tables, documents&lt;/td&gt;
          &lt;td&gt;Vector embeddings + metadata&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Query Type&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Exact matches, range queries, joins&lt;/td&gt;
          &lt;td&gt;Similarity search, nearest neighbors&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Search Paradigm&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&amp;ldquo;Find exact records matching criteria&amp;rdquo;&lt;/td&gt;
          &lt;td&gt;&amp;ldquo;Find similar items to this reference&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Indexing&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;B-trees, hash indexes, inverted indexes&lt;/td&gt;
          &lt;td&gt;Approximate Nearest Neighbor (ANN) indexes&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Use Cases&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Transactional data, structured reporting&lt;/td&gt;
          &lt;td&gt;Semantic search, recommendations, classification&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Query Complexity&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;SQL, complex query languages&lt;/td&gt;
          &lt;td&gt;Vector similarity + optional filtering&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The fundamental difference lies in the approach to understanding data: traditional databases treat data as literal values, while vector databases understand the semantic relationships between data points.&lt;/p&gt;
&lt;h2 id=&#34;2-the-architecture-of-vector-databases&#34;&gt;2. The Architecture of Vector Databases&lt;/h2&gt;
&lt;h3 id=&#34;core-components-of-a-vector-database&#34;&gt;Core Components of a Vector Database&lt;/h3&gt;
&lt;p&gt;Modern vector databases consist of several key components working together:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Vector Storage Layer&lt;/strong&gt;: Responsible for efficiently storing high-dimensional vector data&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Indexing Mechanism&lt;/strong&gt;: Enables fast retrieval of similar vectors&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Metadata Storage&lt;/strong&gt;: Stores additional information about each vector (original text, categories, timestamps, etc.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Query Processing Engine&lt;/strong&gt;: Handles vector similarity searches and optional filtering&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API Layer&lt;/strong&gt;: Provides interfaces for data insertion and querying&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These components work together to deliver the core functionality of storing and retrieving vectors based on similarity.&lt;/p&gt;
&lt;h3 id=&#34;approximate-nearest-neighbor-ann-algorithms&#34;&gt;Approximate Nearest Neighbor (ANN) Algorithms&lt;/h3&gt;
&lt;p&gt;One of the biggest challenges in vector databases is efficiently finding similar vectors in high-dimensional spaces. Exact nearest-neighbor searches become computationally prohibitive as the dataset grows. This is where Approximate Nearest Neighbor (ANN) algorithms come in.&lt;/p&gt;
&lt;p&gt;Popular ANN algorithms used in vector databases include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HNSW (Hierarchical Navigable Small World)&lt;/strong&gt;: Creates a multi-layer graph structure for efficient navigation&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IVF (Inverted File Index)&lt;/strong&gt;: Partitions the vector space into clusters for faster search&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PQ (Product Quantization)&lt;/strong&gt;: Compresses vectors while preserving similarity relationships&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FAISS (Facebook AI Similarity Search)&lt;/strong&gt;: Combines multiple techniques for scalable similarity search&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These algorithms make tradeoffs between search accuracy and performance, typically allowing for sub-millisecond query times even with millions of vectors.&lt;/p&gt;
&lt;h3 id=&#34;vector-database-architecture-models&#34;&gt;Vector Database Architecture Models&lt;/h3&gt;
&lt;p&gt;Vector databases can be implemented with different architectural approaches:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Standalone Vector Databases&lt;/strong&gt;: Purpose-built systems designed exclusively for vector storage and retrieval (e.g., Weaviate, Pinecone)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vector Extensions to Traditional Databases&lt;/strong&gt;: Adding vector capabilities to existing database systems (e.g., PostgreSQL with pgvector)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hybrid Architectures&lt;/strong&gt;: Combining vector search with traditional search capabilities&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each approach has its advantages, with standalone vector databases typically offering the best performance for pure vector-based workloads.&lt;/p&gt;
&lt;h2 id=&#34;3-weaviate-an-open-source-vector-database&#34;&gt;3. Weaviate: An Open-Source Vector Database&lt;/h2&gt;
&lt;h3 id=&#34;what-is-weaviate&#34;&gt;What is Weaviate?&lt;/h3&gt;
&lt;p&gt;Weaviate is a powerful open-source vector database that combines the capabilities of a vector search engine with the features of a traditional database system. It&amp;rsquo;s designed to provide semantic search capabilities with the reliability and scalability expected in production environments.&lt;/p&gt;
&lt;p&gt;Key features of Weaviate include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GraphQL API&lt;/strong&gt;: Intuitive interface for queries and mutations&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RESTful API&lt;/strong&gt;: Alternative interface for standard HTTP operations&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hybrid Search&lt;/strong&gt;: Combining vector search with keyword-based retrieval&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Modular Architecture&lt;/strong&gt;: Pluggable vectorizer modules for different embedding models&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Schema Definition&lt;/strong&gt;: Flexible data modeling capabilities&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cross-References&lt;/strong&gt;: Ability to link objects within the database&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Classification Capabilities&lt;/strong&gt;: Built-in machine learning for data classification&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;weaviate-architecture&#34;&gt;Weaviate Architecture&lt;/h3&gt;
&lt;p&gt;Weaviate&amp;rsquo;s architecture consists of several core components:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Vector Index&lt;/strong&gt;: The HNSW-based vector index for similarity search&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Object Store&lt;/strong&gt;: Storage for both vector data and associated metadata&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GraphQL Interface&lt;/strong&gt;: The primary API for interacting with Weaviate&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vectorization Modules&lt;/strong&gt;: Pluggable components for generating embeddings&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Query Planner&lt;/strong&gt;: Optimizes and executes search queries&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This architecture allows Weaviate to deliver high-performance vector search while maintaining a user-friendly interface.&lt;/p&gt;
&lt;h3 id=&#34;data-modeling-in-weaviate&#34;&gt;Data Modeling in Weaviate&lt;/h3&gt;
&lt;p&gt;Weaviate uses a flexible schema-based approach to data modeling. Each data object in Weaviate:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Belongs to a class (similar to a table in relational databases)&lt;/li&gt;
&lt;li&gt;Has properties (attributes that describe the object)&lt;/li&gt;
&lt;li&gt;Has an associated vector embedding (automatically generated or imported)&lt;/li&gt;
&lt;li&gt;Can have cross-references to other objects&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A simple Weaviate schema for a collection of articles might look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;classes&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;class&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Article&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A news or blog article&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dataType&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The title of the article&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dataType&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The main content of the article&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;publishedDate&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dataType&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;date&amp;#34;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;When the article was published&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;author&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dataType&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Author&amp;#34;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The author of the article&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;class&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Author&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A person who writes articles&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dataType&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The author&amp;#39;s full name&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;biography&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dataType&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The author&amp;#39;s biographical information&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This schema-based approach makes Weaviate approachable for developers familiar with traditional database systems.&lt;/p&gt;
&lt;h2 id=&#34;4-key-capabilities-of-vector-databases&#34;&gt;4. Key Capabilities of Vector Databases&lt;/h2&gt;
&lt;h3 id=&#34;semantic-search&#34;&gt;Semantic Search&lt;/h3&gt;
&lt;p&gt;The most prominent capability of vector databases is semantic search—finding results based on meaning rather than keywords. This includes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Conceptual Matching&lt;/strong&gt;: Finding results that match the concept of a query, even if they use different terminology&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Contextual Understanding&lt;/strong&gt;: Recognizing the intent behind queries and matching accordingly&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multilingual Support&lt;/strong&gt;: Finding relevant content across different languages based on semantic similarity&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Semantic search significantly improves search quality over traditional keyword-based approaches, especially for complex or nuanced queries.&lt;/p&gt;
&lt;h3 id=&#34;hybrid-search&#34;&gt;Hybrid Search&lt;/h3&gt;
&lt;p&gt;While vector search excels at capturing semantic relationships, it may miss exact keyword matches that are relevant. Hybrid search combines the best of both worlds:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Vector Search&lt;/strong&gt;: Captures semantic similarity and conceptual matching&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keyword Search&lt;/strong&gt;: Ensures exact term matches are not missed&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fusion Methods&lt;/strong&gt;: Intelligently combines results from both approaches&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hybrid search typically delivers better overall search quality than either approach alone, especially for general-purpose search applications.&lt;/p&gt;
&lt;h3 id=&#34;multimodal-search&#34;&gt;Multimodal Search&lt;/h3&gt;
&lt;p&gt;Advanced vector databases support multimodal search—the ability to search across different types of media using a single query:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Cross-Modal Search&lt;/strong&gt;: Using one modality to search another (e.g., text-to-image search)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unified Embeddings&lt;/strong&gt;: Representing different data types in a shared vector space&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multimodal Queries&lt;/strong&gt;: Combining multiple modalities in a single query&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This capability enables powerful applications such as searching for images using text descriptions, or finding text content related to an image.&lt;/p&gt;
&lt;h3 id=&#34;classification-and-recommendation&#34;&gt;Classification and Recommendation&lt;/h3&gt;
&lt;p&gt;Beyond search, vector databases enable other important capabilities:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Automatic Classification&lt;/strong&gt;: Categorizing new items based on similarity to existing categorized items&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recommendation Systems&lt;/strong&gt;: Suggesting related items based on vector similarity&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Anomaly Detection&lt;/strong&gt;: Identifying outliers in vector space&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These capabilities make vector databases valuable not just for search applications, but for a wide range of AI-enhanced systems.&lt;/p&gt;
&lt;h2 id=&#34;5-advantages-of-vector-databases&#34;&gt;5. Advantages of Vector Databases&lt;/h2&gt;
&lt;h3 id=&#34;enhanced-search-quality&#34;&gt;Enhanced Search Quality&lt;/h3&gt;
&lt;p&gt;Vector databases offer significant improvements in search quality:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Understanding Intent&lt;/strong&gt;: Capturing the meaning behind queries rather than just matching keywords&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Handling Synonyms&lt;/strong&gt;: Recognizing different terms with the same meaning&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Concept Matching&lt;/strong&gt;: Finding results related to the same concept even with different terminology&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Context Sensitivity&lt;/strong&gt;: Understanding the nuance and context of queries&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These improvements translate to better user experiences and more effective information retrieval.&lt;/p&gt;
&lt;h3 id=&#34;scalability-and-performance&#34;&gt;Scalability and Performance&lt;/h3&gt;
&lt;p&gt;Modern vector databases are designed for production-grade performance:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Sub-Second Query Times&lt;/strong&gt;: Even with millions of vectors&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Horizontal Scaling&lt;/strong&gt;: Distributing workloads across multiple nodes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Efficient Storage&lt;/strong&gt;: Optimized for high-dimensional vector data&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Low Latency&lt;/strong&gt;: For real-time applications&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This scalability makes vector databases suitable for everything from small applications to enterprise-scale deployments.&lt;/p&gt;
&lt;h3 id=&#34;integration-with-ai-workflows&#34;&gt;Integration with AI Workflows&lt;/h3&gt;
&lt;p&gt;Vector databases fit seamlessly into modern AI workflows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;LLM Integration&lt;/strong&gt;: Enhancing large language models with retrieval capabilities&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embedding Pipeline Integration&lt;/strong&gt;: Working directly with embedding models&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data Processing Support&lt;/strong&gt;: Handling continuous updates and new data&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API-First Design&lt;/strong&gt;: Easy integration with existing systems&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This integration potential makes vector databases a key component in the AI infrastructure stack.&lt;/p&gt;
&lt;h2 id=&#34;6-common-use-cases-for-vector-databases&#34;&gt;6. Common Use Cases for Vector Databases&lt;/h2&gt;
&lt;h3 id=&#34;semantic-document-search&#34;&gt;Semantic Document Search&lt;/h3&gt;
&lt;p&gt;Vector databases excel at finding relevant documents based on meaning:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Enterprise Knowledge Bases&lt;/strong&gt;: Helping employees find relevant information&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Legal Document Search&lt;/strong&gt;: Finding case law and precedents based on concepts&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Research Databases&lt;/strong&gt;: Discovering relevant papers across different terminology&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Content Management&lt;/strong&gt;: Organizing and retrieving content based on themes&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;recommendation-systems&#34;&gt;Recommendation Systems&lt;/h3&gt;
&lt;p&gt;Vector similarity powers effective recommendation systems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Product Recommendations&lt;/strong&gt;: &amp;ldquo;Customers who viewed this also viewed&amp;hellip;&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Content Discovery&lt;/strong&gt;: Finding articles, videos, or music with similar themes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Person Matching&lt;/strong&gt;: Dating apps, professional networking, team formation&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Educational Resources&lt;/strong&gt;: Suggesting learning materials on similar topics&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;image-and-media-search&#34;&gt;Image and Media Search&lt;/h3&gt;
&lt;p&gt;Beyond text, vector databases handle multimedia content effectively:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Reverse Image Search&lt;/strong&gt;: Finding similar images to a reference&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Content-Based Media Retrieval&lt;/strong&gt;: Finding videos or audio with similar content&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Digital Asset Management&lt;/strong&gt;: Organizing and retrieving media based on content&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Visual Product Search&lt;/strong&gt;: Finding products that look similar to a reference&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rag-retrieval-augmented-generation&#34;&gt;RAG (Retrieval Augmented Generation)&lt;/h3&gt;
&lt;p&gt;Vector databases are a key component in RAG systems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Query-Based Document Retrieval&lt;/strong&gt;: Finding relevant documents for an LLM&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Knowledge Grounding&lt;/strong&gt;: Providing factual information to ground LLM responses&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Domain Adaptation&lt;/strong&gt;: Allowing general LLMs to access domain-specific knowledge&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fact Verification&lt;/strong&gt;: Retrieving information to verify LLM-generated content&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;7-implementing-weaviate-in-applications&#34;&gt;7. Implementing Weaviate in Applications&lt;/h2&gt;
&lt;h3 id=&#34;setting-up-a-weaviate-server&#34;&gt;Setting Up a Weaviate Server&lt;/h3&gt;
&lt;p&gt;The first step in working with Weaviate is setting up a server. This can be done in several ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Using Docker (most common method)&lt;/li&gt;
&lt;li&gt;Cloud-hosted options&lt;/li&gt;
&lt;li&gt;Building from source&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the implementation section, I&amp;rsquo;ll provide code examples for setting up a Weaviate server using Docker.&lt;/p&gt;
&lt;h3 id=&#34;defining-your-data-schema&#34;&gt;Defining Your Data Schema&lt;/h3&gt;
&lt;p&gt;Before importing data, you need to define your schema. This involves:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Defining classes (collections of similar objects)&lt;/li&gt;
&lt;li&gt;Specifying properties for each class&lt;/li&gt;
&lt;li&gt;Setting up cross-references between classes&lt;/li&gt;
&lt;li&gt;Configuring vectorizer modules&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The implementation section will include code for defining and creating a schema in Weaviate.&lt;/p&gt;
&lt;h3 id=&#34;importing-data-into-weaviate&#34;&gt;Importing Data into Weaviate&lt;/h3&gt;
&lt;p&gt;Once your schema is defined, you can import data. This typically involves:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Preparing your data in the correct format&lt;/li&gt;
&lt;li&gt;Batching data for efficient imports&lt;/li&gt;
&lt;li&gt;Handling errors and validation&lt;/li&gt;
&lt;li&gt;Monitoring the import process&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&amp;rsquo;ll provide code examples for efficient data importing in the implementation section.&lt;/p&gt;
&lt;h3 id=&#34;implementing-hybrid-search&#34;&gt;Implementing Hybrid Search&lt;/h3&gt;
&lt;p&gt;Hybrid search combines vector search with traditional keyword search. Implementation involves:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Configuring both search types&lt;/li&gt;
&lt;li&gt;Setting appropriate weights for each&lt;/li&gt;
&lt;li&gt;Tuning parameters for optimal results&lt;/li&gt;
&lt;li&gt;Handling and processing results&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The implementation code will demonstrate how to set up and execute hybrid search queries.&lt;/p&gt;
&lt;h2 id=&#34;8-best-practices-and-optimization-strategies&#34;&gt;8. Best Practices and Optimization Strategies&lt;/h2&gt;
&lt;h3 id=&#34;schema-design-best-practices&#34;&gt;Schema Design Best Practices&lt;/h3&gt;
&lt;p&gt;Effective schema design is crucial for Weaviate performance:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Appropriate Property Types&lt;/strong&gt;: Using the right data types for each property&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vectorization Configuration&lt;/strong&gt;: Choosing the right vectorizer for your data&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cross-Reference Planning&lt;/strong&gt;: Designing efficient object relationships&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Indexing Strategy&lt;/strong&gt;: Configuring HNSW parameters for your use case&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;data-import-optimization&#34;&gt;Data Import Optimization&lt;/h3&gt;
&lt;p&gt;Efficient data importing ensures faster time-to-value:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Batch Processing&lt;/strong&gt;: Grouping objects for more efficient imports&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Parallel Processing&lt;/strong&gt;: Utilizing multiple threads for faster imports&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Incremental Updates&lt;/strong&gt;: Strategies for updating existing data&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Error Handling&lt;/strong&gt;: Gracefully managing import failures&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;query-optimization-techniques&#34;&gt;Query Optimization Techniques&lt;/h3&gt;
&lt;p&gt;Optimizing queries improves both performance and result quality:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Vector Search Parameters&lt;/strong&gt;: Tuning distance metrics and k values&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hybrid Search Configuration&lt;/strong&gt;: Balancing vector and keyword components&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Filter Optimization&lt;/strong&gt;: Efficient use of metadata filters&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Result Processing&lt;/strong&gt;: Handling and transforming search results&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;scaling-and-production-considerations&#34;&gt;Scaling and Production Considerations&lt;/h3&gt;
&lt;p&gt;For production deployments, consider these best practices:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Resource Allocation&lt;/strong&gt;: CPU, memory, and storage requirements&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Backup Strategies&lt;/strong&gt;: Ensuring data durability&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Monitoring and Logging&lt;/strong&gt;: Tracking performance and errors&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;High Availability&lt;/strong&gt;: Configuring for redundancy and failover&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;9-challenges-and-limitations&#34;&gt;9. Challenges and Limitations&lt;/h2&gt;
&lt;h3 id=&#34;vector-database-challenges&#34;&gt;Vector Database Challenges&lt;/h3&gt;
&lt;p&gt;While powerful, vector databases come with certain challenges:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Cold Start Problem&lt;/strong&gt;: Initial setup without existing embeddings&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embedding Drift&lt;/strong&gt;: Changes in embedding models over time&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explainability&lt;/strong&gt;: Understanding why certain results are returned&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Resource Intensity&lt;/strong&gt;: Higher computational requirements than traditional databases&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;addressing-common-pitfalls&#34;&gt;Addressing Common Pitfalls&lt;/h3&gt;
&lt;p&gt;To avoid common issues with vector databases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Test Search Quality&lt;/strong&gt;: Regularly evaluate search results with real queries&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Monitor Performance&lt;/strong&gt;: Track query times and resource utilization&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Update Embeddings&lt;/strong&gt;: Regenerate embeddings when models change&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tune Incrementally&lt;/strong&gt;: Make small changes and measure impact&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;implementation-development-with-weaviate&#34;&gt;Implementation: Development with Weaviate&lt;/h2&gt;
&lt;p&gt;Following the steps at &lt;a href=&#34;https://weaviate.io/developers/weaviate/quickstart&#34;&gt;https://weaviate.io/developers/weaviate/quickstart&lt;/a&gt;, we create an endpoint and API key for ourselves.&lt;/p&gt;
&lt;p&gt;We start a project locally or from a GitHub repository and run the following commands in sequence.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npm init -y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npm install axios openai weaviate-client
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After creating our project and installing the necessary components, we use the following script to convert sample data from &lt;a href=&#34;https://dummyjson.com/products&#34;&gt;https://dummyjson.com/products&lt;/a&gt; into embeddings.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;axios&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;axios&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;writeFileSync&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;OpenAI&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;openai&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fs&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Initialize OpenAI API client
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;openai&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OpenAI&lt;/span&gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;apiKey&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// Add your OpenAI API key here
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Converts product title to URL-friendly format
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param {string} title - Product title
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @returns {string} - Formatted URI string
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;formatProductUri&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toLowerCase&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;replace&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;/\s+/g&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Processes product data and generates embeddings
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param {Object} product - Raw product data
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @returns {Object} - Formatted product with vector embedding
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;formatProductData&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;product&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Combine product data as string for embedding
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;productString&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;JSON&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stringify&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;product&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Generate embedding using OpenAI
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;embeddingResponse&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;openai&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;embeddings&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;model&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text-embedding-ada-002&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;productString&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;embedding&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;embeddingResponse&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;embedding&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Return product in the required format
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;product&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;formatProductUri&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;product&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;product&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;vectorContent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;embedding&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`Error processing product: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;product&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Main function to fetch products from API and process them
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Generates vector embeddings for each product
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetchAndProcessProducts&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Fetching products...&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;axios&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://dummyjson.com/products?limit=200&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;products&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;products&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;fs&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;writeFileSync&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;products.json&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;JSON&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stringify&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;products&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`Fetched &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;products&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; products. Processing...`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Process all products
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;processedProducts&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Process each product sequentially to avoid rate limits
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;product&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;products&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`Processing product &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;products&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;product&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;formattedProduct&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;formatProductData&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;product&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;processedProducts&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;formattedProduct&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Add delay every 10 products to avoid OpenAI rate limits
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Waiting 1 second for rate limit...&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Promise((&lt;span style=&#34;color:#a6e22e&#34;&gt;resolve&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setTimeout&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;resolve&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`Error processing product: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;product&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Continue despite errors
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Save results to JSON file
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;writeFileSync&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;processed_products.json&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;JSON&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stringify&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;processedProducts&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Processing complete. Results saved to &amp;#39;processed_products.json&amp;#39;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Error occurred:&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Start the process
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fetchAndProcessProducts&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This script will give us a JSON file named &amp;lsquo;processed_products.json&amp;rsquo; that contains both the data itself and its embedded version. Later, we import this data into the Weaviate cloud environment using the script below. Unlike what was explained above, I&amp;rsquo;m not using the schema approach here as I&amp;rsquo;m trying to explain the concept and help you understand the logic behind it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Import script for loading product data into Weaviate vector database
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * This script reads product data from a JSON file and imports it into a Weaviate collection
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;weaviate&lt;/span&gt;, { &lt;span style=&#34;color:#a6e22e&#34;&gt;generateUuid5&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;weaviate-client&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;readFileSync&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Load product data from JSON file
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;products&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;JSON&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;parse&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;readFileSync&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./processed_products.json&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Weaviate cloud service connection details
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WCD_URL&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// Add your WCD URL here
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WCD_API_KEY&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// Add your WCD API key here
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wcdUrl&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WCD_URL&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wcdApiKey&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WCD_API_KEY&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Validate connection details are available
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;wcdUrl&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;wcdApiKey&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Missing required environment variables WCD_URL or WCD_API_KEY&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Initialize Weaviate client
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;weaviate&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connectToWeaviateCloud&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;wcdUrl&lt;/span&gt;, {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;authCredentials&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;weaviate&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ApiKey&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;wcdApiKey&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Main function to import product data into Weaviate
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Starting data import to Weaviate...&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;products recieved&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;products&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Transform product data into Weaviate objects
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dataObjects&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;products&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;item&lt;/span&gt;) =&amp;gt; ({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;properties&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;JSON&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stringify&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;item&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// Generate a deterministic UUID based on collection name and item ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;generateUuid5&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Ecommerce&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;item&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// Use vector if available, otherwise let Weaviate generate it
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;vector&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Array.&lt;span style=&#34;color:#a6e22e&#34;&gt;isArray&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;item&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;vectorContent&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;item&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;vectorContent&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dataObjects received&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;dataObjects&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Get reference to the Ecommerce collection
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;collection&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;collections&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Ecommerce&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Insert all objects in a batch operation
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;collection&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;insertMany&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;dataObjects&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Insertion response: &amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Data import completed&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Error:&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Run the main function
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;().&lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With this script, we upload the created JSON file to the Weaviate system. There are two important aspects here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If your data contains its own ID value, you can specify it separately in the properties section or define it with a different property name because Weaviate has its own Id parameter which must be in UUID format, so we cannot use the data&amp;rsquo;s id field directly there. However, we can use Weaviate&amp;rsquo;s own UUID generator as shown in the example.&lt;/li&gt;
&lt;li&gt;The other field is the collection name. This actually represents the class name. This collection name is used in all operations such as searching, deleting data, etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After importing our data, we move on to searching the data. Above, I mentioned various search types both specific to Weaviate and vector databases in general. In the script below, I used Weaviate&amp;rsquo;s GraphQL feature and hybrid search capability.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Import required libraries
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// axios for making HTTP requests
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;axios&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;axios&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// OpenAI SDK for generating embeddings
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OpenAI&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;openai&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Initialize OpenAI client with API key
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;openai&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OpenAI&lt;/span&gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;apiKey&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;//Add your openAI API key
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Array of questions to process
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;questions&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;do you have macbook?&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Generate an embedding vector for the given text using OpenAI&amp;#39;s API
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param {string} text - The text to generate an embedding for
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @returns {Promise&amp;lt;Array&amp;lt;number&amp;gt;&amp;gt;} The embedding vector
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getEmbedding&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;text&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;openai&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;embeddings&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;model&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text-embedding-ada-002&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;text&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;embedding&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Search Weaviate database using hybrid search (text + vector)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param {string} question - The question to search for
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param {Array&amp;lt;number&amp;gt;} vector - The embedding vector of the question
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @returns {Promise&amp;lt;Object&amp;gt;} Search results and metadata
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;searchWeaviate&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;question&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;vector&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Track response time
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;startTime&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Date.&lt;span style=&#34;color:#a6e22e&#34;&gt;now&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Prepare GraphQL query for Weaviate
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;JSON&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stringify&lt;/span&gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      Get {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Ecommerce (
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          hybrid: {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            query: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;question&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            alpha: 0.5,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            vector: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;JSON&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stringify&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;vector&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          limit: 3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        ) {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          data
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          _additional { score }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    }`&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Configure request parameters
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;post&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://ltwfnj0szusp5t1natqdw.c0.us-west3.gcp.weaviate.cloud/v1/graphql&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;headers&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;Authorization&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Bearer AUV3GwGDrHKwVCJpFFxKc6ppUl7xXF54uQAM&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Execute the request
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;axios&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;endTime&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Date.&lt;span style=&#34;color:#a6e22e&#34;&gt;now&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Format and return results
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;question&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;question&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;results&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Get&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Ecommerce&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;item&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;item&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;responseTime&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;endTime&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;startTime&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ms`&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Handle errors
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`Error for question &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;question&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:`&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;question&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;question&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;responseTime&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Main function to process all questions
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;question&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;questions&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// Generate embedding for the question
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;embedding&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getEmbedding&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;question&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// Search Weaviate using the question and its embedding
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;searchWeaviate&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;question&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;embedding&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// Output results
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n-------------------&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Question:&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;question&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Products:&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;results&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Response Time:&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;responseTime&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`Failed to process question &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;question&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:`&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Execute the main function
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This script takes the question(s) in the questions array and sequentially searches for them on Weaviate servers. While doing this, it uses&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;JSON&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stringify&lt;/span&gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      Get {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Ecommerce (
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          hybrid: {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            query: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;question&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            alpha: 0.5,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            vector: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;JSON&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stringify&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;vector&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          limit: 3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        ) {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          data
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          _additional { score }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    }`&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This part uses Weaviate&amp;rsquo;s hybrid search feature. In the query section, the direct question itself is included. In the vector section, the question&amp;rsquo;s embedded version is used. This way, it performs a hybrid search using both text and vector. The alpha parameter determines the weight of the search. As it increases, the weight of vector search increases, and as it decreases, the weight of keyword search increases. In the limit section, we specify the number of returned data items. In the data section, we specify the property name we want to be returned. The score section shows the scores determined for search results.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Vector databases like Weaviate represent a significant advancement in how we store, retrieve, and understand data. By capturing semantic relationships and enabling similarity-based search, they unlock new capabilities that were previously impractical with traditional database systems.&lt;/p&gt;
&lt;p&gt;As AI continues to transform software development, vector databases will play an increasingly central role in connecting language models, search systems, and user interfaces. Understanding their capabilities, architecture, and implementation strategies is becoming an essential skill for developers working with AI-enhanced applications.&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>RAG: Building Next-Generation AI Systems with Retrieval Augmented Generation</title>
      <link>https://cagatayturkan.com/blog/en/rag-building-next-gen-ai-systems/</link>
      <pubDate>Thu, 13 Mar 2025 10:00:00 +0300</pubDate>
      
      <guid>https://cagatayturkan.com/blog/en/rag-building-next-gen-ai-systems/</guid>
      <description>This article explores the fundamentals of Retrieval Augmented Generation (RAG), how it enhances LLM capabilities through external knowledge retrieval, and its practical applications across industries. We&amp;rsquo;ll examine RAG architecture, implementation strategies, and best practices for creating more accurate, reliable, and context-aware AI systems.</description>
      
      <cardimage>https://cagatayturkan.com/blog/en/rag-building-next-gen-ai-systems/images/cover.svg</cardimage>
      
      
      <featureimage>https://cagatayturkan.com/blog/en/rag-building-next-gen-ai-systems/images/cover.svg</featureimage>
      
      <content:encoded>&lt;h1 id=&#34;rag-building-next-generation-ai-systems-with-retrieval-augmented-generation&#34;&gt;RAG: Building Next-Generation AI Systems with Retrieval Augmented Generation&lt;/h1&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Large Language Models (LLMs) have revolutionized how machines understand and generate human language. However, despite their impressive capabilities, these models have inherent limitations: they only know what they&amp;rsquo;ve been trained on, information may be outdated, and they occasionally &amp;ldquo;hallucinate&amp;rdquo; facts. Retrieval Augmented Generation (RAG) has emerged as a transformative approach to address these challenges by combining the generative power of LLMs with the precision of information retrieval systems.&lt;/p&gt;
&lt;p&gt;In this article, we&amp;rsquo;ll explore:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The fundamental principles and architecture of RAG systems&lt;/li&gt;
&lt;li&gt;How RAG enhances LLM capabilities and overcomes their limitations&lt;/li&gt;
&lt;li&gt;Key components of effective RAG implementations&lt;/li&gt;
&lt;li&gt;Advanced techniques for optimizing RAG performance&lt;/li&gt;
&lt;li&gt;Real-world applications across different industries&lt;/li&gt;
&lt;li&gt;Best practices and future directions for RAG technology&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-understanding-rag-principles-and-architecture&#34;&gt;1. Understanding RAG: Principles and Architecture&lt;/h2&gt;
&lt;h3 id=&#34;what-is-retrieval-augmented-generation&#34;&gt;What is Retrieval Augmented Generation?&lt;/h3&gt;
&lt;p&gt;Retrieval Augmented Generation (RAG) is an AI framework that enhances language models by incorporating external knowledge sources. Instead of relying solely on information encoded in the model&amp;rsquo;s parameters, RAG retrieves relevant documents or data from an external knowledge base and uses this information to generate more accurate, current, and context-aware responses.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://cagatayturkan.com/blog/blog/en/rag-building-next-gen-ai-systems/images/ragArchitecture.svg&#34;
    alt=&#34;Diagram showing basic RAG architecture with user query flow through retriever and generator components&#34;&gt;
&lt;/figure&gt;

&lt;p&gt;The core architecture of a RAG system consists of two primary components:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Retriever&lt;/strong&gt;: Responsible for finding and retrieving relevant information from the knowledge base&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generator&lt;/strong&gt;: The language model that uses both the retrieved information and its own parametric knowledge to generate the final response&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This hybrid approach combines the strengths of both systems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The retriever provides factual precision, up-to-date information, and domain-specific knowledge&lt;/li&gt;
&lt;li&gt;The generator contributes language understanding, reasoning capabilities, and natural language generation&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-evolution-of-rag&#34;&gt;The Evolution of RAG&lt;/h3&gt;
&lt;p&gt;RAG has evolved significantly since its introduction:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Early Information Retrieval&lt;/strong&gt;: Traditional search engines relied on keyword matching, which often missed semantic meaning&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Neural Information Retrieval&lt;/strong&gt;: Introduced neural networks to better understand semantic relationships&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dense Passage Retrieval&lt;/strong&gt;: Improved embedding-based approaches for more accurate document retrieval&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Modern RAG Systems&lt;/strong&gt;: Combine sophisticated retrieval mechanisms with powerful generative models&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each evolutionary step has enhanced the system&amp;rsquo;s ability to find and incorporate relevant knowledge into the generation process.&lt;/p&gt;
&lt;h2 id=&#34;2-key-components-of-effective-rag-systems&#34;&gt;2. Key Components of Effective RAG Systems&lt;/h2&gt;
&lt;h3 id=&#34;knowledge-base-construction&#34;&gt;Knowledge Base Construction&lt;/h3&gt;
&lt;p&gt;The foundation of any RAG system is its knowledge base—the external repository of information that the model can access. Creating an effective knowledge base involves several critical considerations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Data Selection and Curation&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Choose authoritative, accurate sources&lt;/li&gt;
&lt;li&gt;Ensure data diversity and comprehensive coverage&lt;/li&gt;
&lt;li&gt;Maintain information quality and consistency&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Document Processing&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Text extraction from various formats (PDF, HTML, etc.)&lt;/li&gt;
&lt;li&gt;Cleaning and normalization&lt;/li&gt;
&lt;li&gt;Metadata enrichment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Chunking Strategies&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Document segmentation into appropriate-sized chunks&lt;/li&gt;
&lt;li&gt;Semantic vs. fixed-size chunking&lt;/li&gt;
&lt;li&gt;Chunk overlap considerations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The quality, coverage, and organization of the knowledge base significantly impact the overall performance of a RAG system.&lt;/p&gt;
&lt;h3 id=&#34;embedding-and-vector-representations&#34;&gt;Embedding and Vector Representations&lt;/h3&gt;
&lt;p&gt;At the heart of modern RAG systems is the conversion of text into numerical vector representations (embeddings) that capture semantic meaning.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Embedding Generation&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Text is transformed into high-dimensional vectors (typically 768-4096 dimensions)&lt;/li&gt;
&lt;li&gt;Similar meanings are positioned close to each other in vector space&lt;/li&gt;
&lt;li&gt;Different embedding models prioritize different semantic aspects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Properties of Good Embeddings&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Semantic similarity is reflected in vector proximity&lt;/li&gt;
&lt;li&gt;Robust to paraphrasing and linguistic variations&lt;/li&gt;
&lt;li&gt;Dimension-efficient representation of meaning&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Embedding Model Selection&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;General-purpose vs. domain-specialized embeddings&lt;/li&gt;
&lt;li&gt;Size vs. performance tradeoffs&lt;/li&gt;
&lt;li&gt;Cross-lingual capabilities&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;&lt;img src=&#34;https://cagatayturkan.com/blog/blog/en/rag-building-next-gen-ai-systems/images/textEmbeddings.svg&#34;
    alt=&#34;Visualization of text embeddings in 2D/3D space showing semantic clustering&#34;&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;vector-database-technologies&#34;&gt;Vector Database Technologies&lt;/h3&gt;
&lt;p&gt;Vector databases are specialized storage systems designed for efficient similarity search across high-dimensional vectors. They serve as the retrieval engine in RAG systems.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Key Vector Database Features&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Approximate Nearest Neighbor (ANN) algorithms for fast retrieval&lt;/li&gt;
&lt;li&gt;Indexing techniques that balance accuracy and speed&lt;/li&gt;
&lt;li&gt;Filtering capabilities based on metadata&lt;/li&gt;
&lt;li&gt;Scalability to billions of vectors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Popular Vector Database Options&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pinecone: Fully-managed, scalable vector search&lt;/li&gt;
&lt;li&gt;Weaviate: Open-source, semantic search engine&lt;/li&gt;
&lt;li&gt;Milvus: High-performance, distributed architecture&lt;/li&gt;
&lt;li&gt;Qdrant: Rust-based, lightweight, and flexible&lt;/li&gt;
&lt;li&gt;ChromaDB: Python-focused, easy to get started&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The choice of vector database significantly impacts retrieval speed, accuracy, and the overall system&amp;rsquo;s scalability.&lt;/p&gt;
&lt;h2 id=&#34;3-the-rag-pipeline-from-query-to-response&#34;&gt;3. The RAG Pipeline: From Query to Response&lt;/h2&gt;
&lt;h3 id=&#34;query-processing-and-understanding&#34;&gt;Query Processing and Understanding&lt;/h3&gt;
&lt;p&gt;The RAG process begins with the user&amp;rsquo;s input query. Effective query processing involves:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Query Analysis&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Intent recognition&lt;/li&gt;
&lt;li&gt;Entity extraction&lt;/li&gt;
&lt;li&gt;Constraint identification&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Query Transformation&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Query expansion (adding related terms)&lt;/li&gt;
&lt;li&gt;Query refinement (focusing on key elements)&lt;/li&gt;
&lt;li&gt;Rewriting for retrieval optimization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Query Embedding&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Converting the query to the same vector space as the knowledge base&lt;/li&gt;
&lt;li&gt;Applying the same embedding model used for documents&lt;/li&gt;
&lt;li&gt;Preserving the semantic intent in the vector representation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;multi-stage-retrieval-strategies&#34;&gt;Multi-stage Retrieval Strategies&lt;/h3&gt;
&lt;p&gt;Modern RAG systems often employ sophisticated multi-stage retrieval pipelines:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Initial Broad Retrieval&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Semantic search using embedding similarity&lt;/li&gt;
&lt;li&gt;High recall, moderate precision&lt;/li&gt;
&lt;li&gt;Retrieves candidate documents from the vector database&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Re-ranking and Refinement&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;More computationally intensive scoring of initial results&lt;/li&gt;
&lt;li&gt;Cross-attention between query and documents&lt;/li&gt;
&lt;li&gt;Re-ordering based on relevance scores&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Hybrid Retrieval Approaches&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Combining dense (embedding-based) and sparse (keyword-based) retrieval&lt;/li&gt;
&lt;li&gt;Ensemble methods across multiple retrievers&lt;/li&gt;
&lt;li&gt;Domain-specific retrieval strategies&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;&lt;img src=&#34;https://cagatayturkan.com/blog/blog/en/rag-building-next-gen-ai-systems/images/multiStageRetrieval.svg&#34;
    alt=&#34;Flowchart of multi-stage retrieval process with filters and re-ranking&#34;&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;context-integration-and-response-generation&#34;&gt;Context Integration and Response Generation&lt;/h3&gt;
&lt;p&gt;The final stage in the RAG pipeline is generating a response using both the retrieved information and the LLM&amp;rsquo;s capabilities:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Context Window Construction&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Selecting the most relevant retrieved documents&lt;/li&gt;
&lt;li&gt;Ordering and structuring the context&lt;/li&gt;
&lt;li&gt;Managing token limits in the LLM prompt&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Prompt Engineering&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Crafting effective instructions for the LLM&lt;/li&gt;
&lt;li&gt;Specifying how to use the retrieved information&lt;/li&gt;
&lt;li&gt;Setting the tone, format, and constraints&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Response Generation&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LLM processes the query and retrieved context&lt;/li&gt;
&lt;li&gt;Synthesis of information into a coherent response&lt;/li&gt;
&lt;li&gt;Attribution to source documents when appropriate&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-advanced-rag-techniques-and-optimizations&#34;&gt;4. Advanced RAG Techniques and Optimizations&lt;/h2&gt;
&lt;h3 id=&#34;recursive-retrieval-and-retrieval-augmented-retrieval&#34;&gt;Recursive Retrieval and Retrieval Augmented Retrieval&lt;/h3&gt;
&lt;p&gt;Standard RAG performs a single retrieval operation, but advanced implementations use multiple retrieval rounds:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recursive RAG&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Initial response generation&lt;/li&gt;
&lt;li&gt;Analysis of information gaps&lt;/li&gt;
&lt;li&gt;Secondary targeted retrievals to fill those gaps&lt;/li&gt;
&lt;li&gt;Final comprehensive response generation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Retrieval Augmented Retrieval&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using the LLM to help refine the retrieval process&lt;/li&gt;
&lt;li&gt;Generating better search queries based on initial results&lt;/li&gt;
&lt;li&gt;Iterative improvement of retrieval quality&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;query-decomposition-for-complex-questions&#34;&gt;Query Decomposition for Complex Questions&lt;/h3&gt;
&lt;p&gt;Complex queries often encompass multiple sub-questions or aspects. Query decomposition addresses this by:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Breaking down complex queries into simpler sub-queries&lt;/li&gt;
&lt;li&gt;Performing separate retrievals for each sub-query&lt;/li&gt;
&lt;li&gt;Integrating the retrieved information for a comprehensive response&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This approach significantly improves performance on multi-hop reasoning tasks and complex analytical questions.&lt;/p&gt;
&lt;h3 id=&#34;hypothetical-document-embeddings-hyde&#34;&gt;Hypothetical Document Embeddings (HyDE)&lt;/h3&gt;
&lt;p&gt;HyDE is an innovative technique that enhances retrieval quality:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The LLM first generates a hypothetical perfect document that would answer the query&lt;/li&gt;
&lt;li&gt;This hypothetical document is embedded and used for retrieval instead of the original query&lt;/li&gt;
&lt;li&gt;The retrieval results are often more relevant than those from direct query embedding&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This technique leverages the LLM&amp;rsquo;s reasoning abilities to improve the retrieval process itself.&lt;/p&gt;
&lt;h3 id=&#34;knowledge-caching-and-retrieval-memory&#34;&gt;Knowledge Caching and Retrieval Memory&lt;/h3&gt;
&lt;p&gt;Efficient RAG systems can benefit from various caching mechanisms:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Session-Based Caching&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Retaining retrieved documents within a conversation&lt;/li&gt;
&lt;li&gt;Building a working memory of relevant information&lt;/li&gt;
&lt;li&gt;Reducing redundant retrievals&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Cross-Session Knowledge Distillation&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Identifying frequently retrieved information&lt;/li&gt;
&lt;li&gt;Creating condensed knowledge summaries&lt;/li&gt;
&lt;li&gt;Prioritizing high-value information in the retrieval process&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-evaluating-rag-systems&#34;&gt;5. Evaluating RAG Systems&lt;/h2&gt;
&lt;h3 id=&#34;key-performance-metrics&#34;&gt;Key Performance Metrics&lt;/h3&gt;
&lt;p&gt;Measuring RAG performance requires a multifaceted approach:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Retrieval Metrics&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Precision: Accuracy of retrieved documents&lt;/li&gt;
&lt;li&gt;Recall: Comprehensiveness of retrieved information&lt;/li&gt;
&lt;li&gt;Mean Reciprocal Rank (MRR): Position of first relevant document&lt;/li&gt;
&lt;li&gt;Normalized Discounted Cumulative Gain (nDCG): Ranking quality&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Generation Metrics&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Factual accuracy&lt;/li&gt;
&lt;li&gt;Hallucination rate&lt;/li&gt;
&lt;li&gt;Answer relevance&lt;/li&gt;
&lt;li&gt;Response completeness&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;End-to-End Metrics&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User satisfaction&lt;/li&gt;
&lt;li&gt;Query resolution rate&lt;/li&gt;
&lt;li&gt;Time-to-answer&lt;/li&gt;
&lt;li&gt;System latency&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&#34;https://cagatayturkan.com/blog/blog/en/rag-building-next-gen-ai-systems/images/mockupDashboardRagMetric.svg&#34;
    alt=&#34;Dashboard mockup showing key RAG performance metrics&#34;&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;human-in-the-loop-evaluation&#34;&gt;Human-in-the-Loop Evaluation&lt;/h3&gt;
&lt;p&gt;Automated metrics provide valuable signals but should be complemented with human evaluation:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Expert Review&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Domain specialists assessing factual correctness&lt;/li&gt;
&lt;li&gt;Identifying subtle errors or misconceptions&lt;/li&gt;
&lt;li&gt;Evaluating nuanced aspects of responses&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;User Feedback&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Direct ratings from end-users&lt;/li&gt;
&lt;li&gt;Implicit signals (follow-up questions, refinements)&lt;/li&gt;
&lt;li&gt;A/B testing of different RAG configurations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Continuous Improvement&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Identifying patterns in errors or weaknesses&lt;/li&gt;
&lt;li&gt;Targeted enhancement of knowledge gaps&lt;/li&gt;
&lt;li&gt;Iterative refinement of retrieval strategies&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6-real-world-rag-applications&#34;&gt;6. Real-World RAG Applications&lt;/h2&gt;
&lt;h3 id=&#34;enterprise-knowledge-management&#34;&gt;Enterprise Knowledge Management&lt;/h3&gt;
&lt;p&gt;RAG systems are transforming how organizations access and leverage their institutional knowledge:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Internal Documentation Access&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Connecting employees with relevant policies, procedures, and documentation&lt;/li&gt;
&lt;li&gt;Reducing search time and improving information discovery&lt;/li&gt;
&lt;li&gt;Maintaining organizational knowledge continuity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Customer Support Enhancement&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Providing support agents with contextually relevant information&lt;/li&gt;
&lt;li&gt;Ensuring consistent and accurate responses&lt;/li&gt;
&lt;li&gt;Reducing resolution time for complex inquiries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Compliance and Governance&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ensuring responses adhere to regulatory requirements&lt;/li&gt;
&lt;li&gt;Maintaining audit trails of information sources&lt;/li&gt;
&lt;li&gt;Reducing risk through accurate information retrieval&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;scientific-research-and-healthcare&#34;&gt;Scientific Research and Healthcare&lt;/h3&gt;
&lt;p&gt;The ability to retrieve and synthesize specialized knowledge makes RAG valuable in research and healthcare:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Literature Review Assistance&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Retrieving relevant research papers and findings&lt;/li&gt;
&lt;li&gt;Summarizing state-of-the-art knowledge&lt;/li&gt;
&lt;li&gt;Identifying connections across diverse studies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Clinical Decision Support&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Providing clinicians with relevant medical literature&lt;/li&gt;
&lt;li&gt;Retrieving case studies and treatment guidelines&lt;/li&gt;
&lt;li&gt;Supporting evidence-based medicine with the latest research&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Drug Discovery and Development&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Accessing information across pharmaceutical databases&lt;/li&gt;
&lt;li&gt;Synthesizing knowledge from diverse scientific domains&lt;/li&gt;
&lt;li&gt;Accelerating research through improved information access&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;education-and-learning&#34;&gt;Education and Learning&lt;/h3&gt;
&lt;p&gt;RAG is transforming educational experiences through personalized knowledge access:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Intelligent Tutoring Systems&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Retrieving explanations tailored to student questions&lt;/li&gt;
&lt;li&gt;Providing diverse learning resources on demand&lt;/li&gt;
&lt;li&gt;Adapting explanations to different learning styles&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Curriculum Development&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Accessing and synthesizing educational standards&lt;/li&gt;
&lt;li&gt;Retrieving relevant teaching materials&lt;/li&gt;
&lt;li&gt;Creating comprehensive learning pathways&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;7-rag-implementation-challenges-and-solutions&#34;&gt;7. RAG Implementation Challenges and Solutions&lt;/h2&gt;
&lt;h3 id=&#34;retrieval-quality-optimization&#34;&gt;Retrieval Quality Optimization&lt;/h3&gt;
&lt;p&gt;Retrieval errors represent one of the most significant challenges in RAG systems:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Common Retrieval Issues&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Semantic mismatch between query and relevant documents&lt;/li&gt;
&lt;li&gt;Over-reliance on lexical overlap&lt;/li&gt;
&lt;li&gt;Difficulty with implicit knowledge needs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Solutions&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Advanced query rewriting techniques&lt;/li&gt;
&lt;li&gt;Ensemble retrieval approaches&lt;/li&gt;
&lt;li&gt;Domain-specific embedding fine-tuning&lt;/li&gt;
&lt;li&gt;Continuous retrieval feedback loops&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hallucination-mitigation&#34;&gt;Hallucination Mitigation&lt;/h3&gt;
&lt;p&gt;Even with retrieval augmentation, LLMs can still produce inaccurate information:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Types of Hallucinations&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Intrinsic: Originating from the model&amp;rsquo;s parametric knowledge&lt;/li&gt;
&lt;li&gt;Extrinsic: Misinterpreting or misrepresenting retrieved information&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Mitigation Strategies&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Explicit attribution requirements&lt;/li&gt;
&lt;li&gt;Confidence scoring and uncertainty indication&lt;/li&gt;
&lt;li&gt;Retrieval verification loops&lt;/li&gt;
&lt;li&gt;Fact-checking against retrieved information&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;system-latency-and-performance&#34;&gt;System Latency and Performance&lt;/h3&gt;
&lt;p&gt;RAG systems introduce additional computational steps that can impact response time:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Performance Bottlenecks&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Embedding generation time&lt;/li&gt;
&lt;li&gt;Vector search latency&lt;/li&gt;
&lt;li&gt;Context processing in large LLMs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Optimization Approaches&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Embedding caching and precomputation&lt;/li&gt;
&lt;li&gt;Vector database query optimization&lt;/li&gt;
&lt;li&gt;Tiered retrieval architectures&lt;/li&gt;
&lt;li&gt;Asynchronous prefetching strategies&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;8-future-directions-in-rag&#34;&gt;8. Future Directions in RAG&lt;/h2&gt;
&lt;h3 id=&#34;multimodal-rag-systems&#34;&gt;Multimodal RAG Systems&lt;/h3&gt;
&lt;p&gt;The evolution of RAG is moving beyond text to incorporate diverse data types:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Image-Text Retrieval&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Finding relevant images based on textual queries&lt;/li&gt;
&lt;li&gt;Retrieving text information based on image content&lt;/li&gt;
&lt;li&gt;Multimodal knowledge bases with mixed content types&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Audio and Video Integration&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Retrieving information from speech, music, or sound effects&lt;/li&gt;
&lt;li&gt;Accessing knowledge from video content&lt;/li&gt;
&lt;li&gt;Cross-modal retrieval across diverse media types&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;self-improving-rag&#34;&gt;Self-Improving RAG&lt;/h3&gt;
&lt;p&gt;Future RAG systems will continuously enhance their own performance:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Automatic Knowledge Base Refinement&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Identifying knowledge gaps from user interactions&lt;/li&gt;
&lt;li&gt;Prioritizing areas for knowledge expansion&lt;/li&gt;
&lt;li&gt;Automatically curating and updating information&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Retrieval Strategy Optimization&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Learning optimal retrieval parameters from user feedback&lt;/li&gt;
&lt;li&gt;Adapting to different query types and domains&lt;/li&gt;
&lt;li&gt;Self-tuning for improved performance over time&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;agent-based-rag-architectures&#34;&gt;Agent-Based RAG Architectures&lt;/h3&gt;
&lt;p&gt;RAG is evolving from a passive information system to an active reasoning framework:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tool-Augmented RAG&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Combining retrieval with external tool usage&lt;/li&gt;
&lt;li&gt;Dynamic information gathering based on initial retrievals&lt;/li&gt;
&lt;li&gt;Closed-loop verification with external systems&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Multi-Agent RAG Systems&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Specialized retrievers for different knowledge domains&lt;/li&gt;
&lt;li&gt;Collaborative information synthesis across agents&lt;/li&gt;
&lt;li&gt;Hierarchical decision-making for complex queries&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;&lt;img src=&#34;https://cagatayturkan.com/blog/blog/en/rag-building-next-gen-ai-systems/images/multiAgentRagDiagram.svg&#34;
    alt=&#34;Conceptual diagram of multi-agent RAG architecture&#34;&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Retrieval Augmented Generation represents a fundamental shift in how we build AI systems that interact with information. By combining the creative and reasoning capabilities of large language models with the precision and timeliness of information retrieval, RAG creates AI systems that are more accurate, trustworthy, and useful.&lt;/p&gt;
&lt;p&gt;The key advantages of RAG include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Enhanced factual accuracy through external knowledge grounding&lt;/li&gt;
&lt;li&gt;Ability to access up-to-date information beyond the model&amp;rsquo;s training cutoff&lt;/li&gt;
&lt;li&gt;Domain adaptation without full model fine-tuning&lt;/li&gt;
&lt;li&gt;Transparent sourcing of information&lt;/li&gt;
&lt;li&gt;Reduced hallucination rates&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As RAG technologies continue to evolve, we can expect these systems to become even more sophisticated—incorporating multimodal data, engaging in more complex reasoning chains, and continuously improving their own performance. The future of AI lies not just in bigger models, but in smarter architectures that effectively combine neural and symbolic approaches to knowledge.&lt;/p&gt;
&lt;p&gt;Organizations implementing RAG today are already seeing significant benefits in knowledge management, customer support, research, and many other domains. As these techniques become more accessible and refined, they will form the foundation of a new generation of AI systems that are not just impressive in their language capabilities, but reliable in their knowledge.&lt;/p&gt;
&lt;hr&gt;
</content:encoded>
    </item>
    
  </channel>
</rss> 