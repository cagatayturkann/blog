{
    "title": "Build a RESTful API with Fastify and Node.js",
    "permalink": "/tr/blog/build-restful-api-with-fastify-nodejs/",
    "summary": "Fastify is a modern web framework for Node.js that focuses on providing high performance with low overhead. In this article, I will explain in detail what Fastify is, how it\u0026rsquo;s used, and best practice recommendations.",
    "content": "\\Hello everyone! In this article, I\u0026rsquo;m going to talk about Fastify, a fast and low overhead web framework for Node.js. We\u0026rsquo;ll build a simple TODO API together, and I\u0026rsquo;ll explain how Fastify\u0026rsquo;s features can make your development process more efficient.\nWhat is Fastify and Why Should We Use It? Fastify is a modern web framework for Node.js that focuses on providing high performance with low overhead. While most Node.js developers are familiar with Express.js, Fastify offers some compelling advantages:\nUp to 2x faster than Express Built-in schema validation Automatic Swagger documentation Plugin-based architecture Setting Up Our Project Let\u0026rsquo;s start by setting up our project. First, we need to install some dependencies. Create a new directory and run these commands:\nmkdir fastify-todo-api cd fastify-todo-api npm init -y Now, let\u0026rsquo;s install the packages we\u0026rsquo;ll need:\n{ \u0026#34;dependencies\u0026#34;: { \u0026#34;fastify\u0026#34;: \u0026#34;^3.29.0\u0026#34;, \u0026#34;fastify-swagger\u0026#34;: \u0026#34;^5.2.0\u0026#34;, \u0026#34;uuid\u0026#34;: \u0026#34;^8.3.2\u0026#34; }, \u0026#34;devDependencies\u0026#34;: { \u0026#34;nodemon\u0026#34;: \u0026#34;^2.0.16\u0026#34; } } Project Structure Before we start coding, let\u0026rsquo;s organize our project structure. We\u0026rsquo;ll follow a clean and maintainable approach:\nfastify-todo-api/ ├── app.js # Main server file ├── items.js # Our data store ├── routes/ │ └── todoRouter.js # Route definitions └── controllers/ └── todoController.js # Request handlers Creating Our First Fastify Server Let\u0026rsquo;s start with our main server file (app.js). Here\u0026rsquo;s how we set up a basic Fastify server:\nconst fastify = require(\u0026#39;fastify\u0026#39;)({ logger: true }); // Setting up Swagger documentation fastify.register(require(\u0026#39;fastify-swagger\u0026#39;), { exposeRoute: true, routePrefix: \u0026#39;/docs\u0026#39;, swagger: { info: { title: \u0026#39;fastify-api\u0026#39; }, }, }); // Registering our routes fastify.register(require(\u0026#39;./routes/todoRouter\u0026#39;)); const PORT = 5000; const start = async () =\u0026gt; { try { await fastify.listen(PORT); } catch (error) { fastify.log.error(error); process.exit(1); } }; start(); What\u0026rsquo;s happening in this code?\nWe create a Fastify instance with logging enabled We set up Swagger documentation (accessible at /docs) We register our routes using Fastify\u0026rsquo;s plugin system We start the server on port 5000 Understanding Fastify\u0026rsquo;s Schema Validation One of Fastify\u0026rsquo;s most powerful features is its schema validation system. Let\u0026rsquo;s look at how we can use it in our todoRouter.js:\n// First, we define what a TODO item looks like const Item = { type: \u0026#39;object\u0026#39;, properties: { id: { type: \u0026#39;string\u0026#39; }, name: { type: \u0026#39;string\u0026#39; }, }, }; // Then we create schemas for our endpoints const getItemsOpts = { schema: { response: { 200: { type: \u0026#39;array\u0026#39;, items: Item, }, }, }, handler: getItems, }; What makes this special?\nFastify automatically validates all incoming and outgoing data It generates Swagger documentation from these schemas It improves performance by optimizing serialization It catches errors before they reach your handlers Creating Our Controllers Now let\u0026rsquo;s look at how we handle requests in todoController.js:\nlet items = require(\u0026#39;../items\u0026#39;); const { v4: uuidv4 } = require(\u0026#39;uuid\u0026#39;); // Get all items const getItems = (req, reply) =\u0026gt; { reply.send(items); }; // Create new item const addItem = (req, reply) =\u0026gt; { const { name } = req.body; const item = { id: uuidv4(), name, }; items = [...items, item]; reply.code(201).send(item); }; Notice how Fastify makes response handling simple:\nNo need to set Content-Type headers manually Method chaining for status codes and sending responses Automatic response serialization Testing Our API Now that we have everything set up, let\u0026rsquo;s test our API. You can use curl or any API testing tool:\n# Get all items curl http://localhost:5000/items # Create a new item curl -X POST \\ http://localhost:5000/items \\ -H \u0026#39;Content-Type: application/json\u0026#39; \\ -d \u0026#39;{\u0026#34;name\u0026#34;:\u0026#34;Learn Fastify\u0026#34;}\u0026#39; Performance Features You Should Know About Fastify isn\u0026rsquo;t just fast by accident. Here\u0026rsquo;s why it performs so well:\nSchema-based Serialization\nPre-compiles schemas for faster validation Optimizes JSON serialization Reduces processing overhead Efficient Routing\nUses a radix tree for route matching Faster than regex-based routing Optimized parameter handling Lightweight Core\nMinimal baseline overhead Plugin system for adding features Efficient memory usage Best Practices I Recommend After working with Fastify, here are some practices I\u0026rsquo;ve found helpful:\nAlways Use Schemas\nfastify.get(\u0026#39;/items\u0026#39;, { schema: { response: { 200: itemSchema } } }) Organize with Plugins\nfastify.register(require(\u0026#39;./routes/items\u0026#39;)) fastify.register(require(\u0026#39;./routes/users\u0026#39;)) Handle Errors Properly\nfastify.setErrorHandler(function (error, request, reply) { reply.status(error.statusCode || 500).send({error: error.message}) }) Conclusion Fastify provides an excellent foundation for building high-performance Node.js APIs. Its built-in features like schema validation and swagger documentation make it a great choice for modern web applications. In future articles, I\u0026rsquo;ll explore more advanced Fastify features and how to use them effectively in production. Thanks for reading!\nRemember to check out the Fastify documentation for more detailed information about all these features.\n",
    "tags": ["nodejs","fastify"],
    "categories": ["Node.js"],
    "lang": "tr"
} 