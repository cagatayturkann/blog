{
    "title": "TypeScript'i Anlamak - Bölüm 5: TypeScript Derleyicisi",
    "permalink": "/tr/blog/typescript-serisi/typescripti-anlamak-bolum5-copy/",
    "summary": "Bu makalede, TypeScript derleyicisini detaylı bir şekilde inceleyeceğiz. Derleyici ayarları, yapılandırma seçenekleri ve proje yapılandırmasının nasıl yönetileceğini öğreneceğiz.",
    "content": "Merhaba! TypeScript serimizin bu bölümünde, kodlarımızın nasıl JavaScript\u0026rsquo;e dönüştüğünü ve bu süreci nasıl yönetebileceğimizi inceleyeceğiz. TypeScript derleyicisi ve yapılandırma seçenekleri, projelerimizin temelini oluşturan önemli konular arasında yer alıyor.\nTypeScript Derleyicisi Nedir? TypeScript derleyicisi (tsc), yazdığımız TypeScript kodunu tarayıcıların anlayabileceği JavaScript koduna dönüştüren araçtır. Modern TypeScript özelliklerini kullanarak yazdığımız kodları, hedeflediğimiz JavaScript sürümüne uygun hale getirir.\nProjeyi Başlatma: tsc \u0026ndash;init TypeScript projemizi başlatırken ilk adımımız, bir yapılandırma dosyası oluşturmak. Bunu tsc --init komutu ile yapabiliyoruz:\nnpx tsc --init Bu komut, projemizin kök dizininde bir tsconfig.json dosyası oluşturur. Bu dosya, derleyicinin davranışını belirleyen temel ayarları içerir:\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;target\u0026#34;: \u0026#34;es2016\u0026#34;, \u0026#34;module\u0026#34;: \u0026#34;commonjs\u0026#34;, \u0026#34;strict\u0026#34;: true, \u0026#34;esModuleInterop\u0026#34;: true, \u0026#34;skipLibCheck\u0026#34;: true, \u0026#34;forceConsistentCasingInFileNames\u0026#34;: true } } Watch Mode ile Geliştirme Geliştirme sürecinde kodumuzda yaptığımız değişiklikleri anında derlemek için Watch Mode kullanabiliriz:\ntsc --watch # veya tsc -w Watch Mode\u0026rsquo;un sağladığı avantajlar:\nDosya değişikliklerini otomatik algılar Anlık derleme gerçekleştirir Hataları gerçek zamanlı gösterir Geliştirme sürecini hızlandırır // örnek.ts let mesaj = \u0026#39;Merhaba TypeScript!\u0026#39;; console.log(mesaj); // Watch Mode aktifken, dosyayı kaydettiğinizde // otomatik olarak JavaScript dosyası güncellenir Çoklu Dosya Derleme TypeScript derleyicisi, projemizdeki tüm TypeScript dosyalarını tek bir komutla derleyebilir. Proje dizininde tsc komutunu çalıştırdığımızda, tüm .ts dosyaları otomatik olarak derlenir:\n// kullanici.ts export interface Kullanici { id: number; ad: string; } // servis.ts import { Kullanici } from \u0026#39;./kullanici\u0026#39;; export class KullaniciServisi { // servis kodları } // Her iki dosya da tek komutla derlenir tsconfig.json ve Temel Ayarlar Files Seçeneği tsconfig.json dosyasında files seçeneği, derlenecek dosyaları açıkça belirtmemizi sağlar:\n{ \u0026#34;compilerOptions\u0026#34;: { // diğer seçenekler }, \u0026#34;files\u0026#34;: [\u0026#34;src/main.ts\u0026#34;, \u0026#34;src/utils/helpers.ts\u0026#34;, \u0026#34;src/types/index.d.ts\u0026#34;] } Include ve Exclude Seçenekleri Projemizde hangi dosyaların derlenip hangilerinin derlenmeyeceğini belirlemek için include ve exclude seçeneklerini kullanırız:\n{ \u0026#34;compilerOptions\u0026#34;: { // diğer seçenekler }, \u0026#34;include\u0026#34;: [ \u0026#34;src/**/*\u0026#34; // src klasörü altındaki tüm dosyalar ], \u0026#34;exclude\u0026#34;: [ \u0026#34;node_modules\u0026#34;, // node_modules klasörü hariç \u0026#34;**/*.test.ts\u0026#34;, // test dosyaları hariç \u0026#34;src/temp/*\u0026#34; // geçici dosyalar hariç ] } Bu yapılandırma özellikle:\nnode_modules klasörünü derleme dışında tutmak Test dosyalarını üretim kodundan ayırmak Belirli dizinleri veya dosya türlerini hariç tutmak için kullanışlıdır OutDir: Çıktı Dizini Belirleme Derlenmiş JavaScript dosyalarının kaydedileceği yeri outDir seçeneği ile belirleriz:\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;outDir\u0026#34;: \u0026#34;./dist\u0026#34; } } Bu yapılandırma ile:\nTypeScript dosyaları src klasöründe kalır Derlenen JavaScript dosyaları dist klasörüne kaydedilir Proje yapısı daha düzenli hale gelir Örnek proje yapısı:\nproje/ ├── src/ │ ├── index.ts │ └── utils/ │ └── helpers.ts ├── dist/ │ ├── index.js │ └── utils/ │ └── helpers.js └── tsconfig.json Target: JavaScript Sürüm Hedefi target seçeneği, TypeScript kodumuzun hangi JavaScript sürümüne derleneceğini belirler:\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;target\u0026#34;: \u0026#34;es2020\u0026#34; // Diğer seçenekler: \u0026#34;es3\u0026#34;, \u0026#34;es5\u0026#34;, \u0026#34;es6\u0026#34;, \u0026#34;es2016\u0026#34;, \u0026#34;es2017\u0026#34;, \u0026#34;esnext\u0026#34; } } Farklı hedeflerin etkisini gösteren bir örnek:\n// TypeScript kodu class Hayvan { constructor(public isim: string) {} } // target: \u0026#34;es5\u0026#34; için çıktı var Hayvan = /** @class */ (function () { function Hayvan(isim) { this.isim = isim; } return Hayvan; })(); // target: \u0026#34;es2020\u0026#34; için çıktı class Hayvan { constructor(isim) { this.isim = isim; } } Strict Mode ve Null Kontrolleri TypeScript\u0026rsquo;in tip güvenliği özelliklerini en üst düzeyde kullanmak için strict modunu etkinleştirebiliriz:\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;strict\u0026#34;: true, \u0026#34;strictNullChecks\u0026#34;: true } } Bu ayarların etkisi:\n// strict: false let isim: string; isim = null; // Sorun yok // strict: true ve strictNullChecks: true let isim: string; isim = null; // Hata! Type \u0026#39;null\u0026#39; is not assignable to type \u0026#39;string\u0026#39; // Doğru kullanım let isim: string | null; isim = null; // Şimdi çalışır JavaScript Dosyalarını Dahil Etme Bazı projelerde JavaScript ve TypeScript dosyalarını birlikte kullanmamız gerekebilir. allowJs seçeneği bu durumu mümkün kılar:\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;allowJs\u0026#34;: true, \u0026#34;checkJs\u0026#34;: true // JavaScript dosyalarında tip kontrolü yapar } } Bu özellik özellikle:\nMevcut JavaScript projelerini TypeScript\u0026rsquo;e geçirirken Üçüncü parti JavaScript kütüphaneleriyle çalışırken Kademeli TypeScript adaptasyonu yaparken kullanışlıdır Örnek kullanım:\n// utils.js (JavaScript dosyası) export function topla(a, b) { return a + b; } // index.ts (TypeScript dosyası) import { topla } from \u0026#39;./utils.js\u0026#39;; const sonuc = topla(5, 3); // TypeScript tip kontrolü çalışır Best Practices Yapılandırmayı Projeye Göre Ayarlayın\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;target\u0026#34;: \u0026#34;es2020\u0026#34;, // Modern tarayıcılar için \u0026#34;module\u0026#34;: \u0026#34;esnext\u0026#34;, // Modern modül sistemi \u0026#34;strict\u0026#34;: true, // Sıkı tip kontrolü \u0026#34;outDir\u0026#34;: \u0026#34;./dist\u0026#34;, // Çıktı dizini \u0026#34;rootDir\u0026#34;: \u0026#34;./src\u0026#34; // Kaynak dizini } } Watch Mode\u0026rsquo;u Etkin Kullanın\n# package.json { \u0026#34;scripts\u0026#34;: { \u0026#34;dev\u0026#34;: \u0026#34;tsc --watch\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;tsc\u0026#34; } } Proje Yapısını Düzenli Tutun\nproje/ ├── src/ # TypeScript kaynak dosyaları ├── dist/ # Derlenen JavaScript dosyaları ├── tests/ # Test dosyaları ├── tsconfig.json # TypeScript yapılandırması └── package.json Uygun Include/Exclude Yapılandırması\n{ \u0026#34;include\u0026#34;: [\u0026#34;src/**/*\u0026#34;], \u0026#34;exclude\u0026#34;: [\u0026#34;node_modules\u0026#34;, \u0026#34;**/*.test.ts\u0026#34;, \u0026#34;**/*.spec.ts\u0026#34;] } Sonuç TypeScript derleyicisi ve yapılandırma seçenekleri, modern web geliştirme süreçlerinin önemli bir parçasıdır. Doğru yapılandırma ile:\nDaha güvenli kod yazabilir Geliştirme sürecini hızlandırabilir Proje yapısını daha iyi organize edebilir Takım çalışmasını kolaylaştırabilirsiniz Bir sonraki yazımızda TypeScript\u0026rsquo;in daha ileri seviye özelliklerini inceleyeceğiz. Görüşmek üzere!\n",
    "tags": ["typescript","compiler","configuration"],
    "categories": ["TypeScript"],
    "lang": "tr"
} 