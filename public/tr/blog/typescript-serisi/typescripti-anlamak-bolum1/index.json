{
    "title": "TypeScript'i Anlamak - Bölüm 1: Temeller",
    "permalink": "/tr/blog/typescript-serisi/typescripti-anlamak-bolum1/",
    "summary": "TypeScript, JavaScript\u0026rsquo;e statik tip desteği ekleyen güçlü bir üst kümedir. Bu makale serisinde, TypeScript\u0026rsquo;i temellerden ileri seviyeye kadar keşfedeceğiz ve temel tipler ve tip çıkarımı ile başlayacağız.",
    "content": "Merhaba! Yakın zamanda TypeScript\u0026rsquo;i derinlemesine öğrenmeye başlayan bir geliştirici olarak, bu öğrenme yolculuğumu sizlerle paylaşmak istiyorum. Bu seride, TypeScript\u0026rsquo;i en temelinden başlayarak inceleyeceğiz, neden var olduğunu ve JavaScript geliştirme deneyimimizi nasıl daha iyi hale getirebileceğini anlayacağız.\nTypeScript Nedir? TypeScript, en basit tanımıyla tip desteği eklenmiş JavaScript\u0026rsquo;tir. Ancak bu tanım, TypeScript\u0026rsquo;in tüm özelliklerini karşılamıyor. Microsoft tarafından geliştirilen TypeScript, JavaScript\u0026rsquo;e statik tip desteği ekleyen bir üst kümedir (superset). Bu, tüm geçerli JavaScript kodunun aynı zamanda geçerli TypeScript kodu olduğu, ancak TypeScript\u0026rsquo;in daha sağlam ve sürdürülebilir kod yazmamıza yardımcı olan ek özellikler sunduğu anlamına gelir.\nTypeScript\u0026rsquo;in JavaScript\u0026rsquo;ten nasıl farklılaştığına dair basit bir örnek:\n// JavaScript let greeting = \u0026#34;Hello\u0026#34;; greeting = 42; // JavaScript\u0026#39;te çalışır, ancak sorunlara yol açabilir // TypeScript let greeting: string = \u0026#34;Hello\u0026#34;; greeting = 42; // Hata: \u0026#39;number\u0026#39; tipi \u0026#39;string\u0026#39; tipine atanamaz Neden Tipler? TypeScript\u0026rsquo;in tip sistemi birkaç önemli avantaj sağlar:\nHataları bulmamıza yardımcı olur: Tip sistemi, kodumuz çalışmadan önce hataları yakalayabilir Kodumuzu yazarken analiz eder: Editörümüzde gerçek zamanlı geri bildirim sağlar Sadece geliştirme aşamasında vardır: Tipler, kod JavaScript\u0026rsquo;e derlendiğinde kaldırılır Bu özellikler, TypeScript\u0026rsquo;i özellikle büyük kod tabanları ve takım çalışmaları için değerli kılar.\nTypeScript\u0026rsquo;te Temel Tipler Şimdi TypeScript\u0026rsquo;teki temel tipleri inceleyelim:\n1. String (Metin) String\u0026rsquo;ler TypeScript\u0026rsquo;te metin değerlerini temsil eder. İşte nasıl kullanıldıklarına dair bir örnek:\n// String değişkeni tanımlama let myString: string = \u0026#34;Merhaba!!!\u0026#34;; // Farklı bir tipe ATANMAZ myString = 100; // Hata // Aynı tipte bir değere ATANABİLİR myString = \u0026#34;Yeni metin!!!\u0026#34;; // Çalışır Bu örnekte, myString\u0026lsquo;i bir string olarak tanımladıktan sonra, TypeScript sadece string değerler atayabilmemizi sağlar.\n2. Number (Sayı) TypeScript, diğer dillere göre sayı yönetimini basitleştirir:\n// Sayı değişkeni tanımlama let myNumber: number = 42; // Farklı bir tipe ATANMAZ myNumber = \u0026#34;Ben bir string\u0026#39;im!\u0026#34;; // Hata // Aynı tipte bir değere ATANABİLİR myNumber = 60; // Çalışır Bazı programlama dillerinin aksine (float, int vb. gibi birden çok sayı tipi olan), TypeScript (JavaScript gibi) tüm sayısal değerler için sadece number tipini kullanır.\n3. Boolean (Mantıksal) Boolean değerler doğru/yanlış durumlarını temsil eder:\n// Boolean değişkeni tanımlama const myBoolean: boolean = true; // Farklı bir tipe ATANMAZ myBoolean = 87; // Hata // Aynı tipte bir değere ATANABİLİR myBoolean = false; // Çalışır Tip Çıkarımı (Type Inference) TypeScript\u0026rsquo;in en güçlü özelliklerinden biri, tipleri otomatik olarak çıkarabilme yeteneğidir. Bu, her zaman tipleri açıkça belirtmemiz gerekmediği anlamına gelir:\n// Bir değişkeni tip belirtmeden değer ile tanımlama let x = 27; x = \u0026#39;Yirmi yedi\u0026#39;; // Hata - \u0026#39;string\u0026#39; tipi \u0026#39;number\u0026#39; tipine atanamaz Bu örnekte TypeScript, x değişkeninin tipini ilk değerine bakarak otomatik olarak number olarak belirler. Bu özellik, tip güvenliğini korurken daha az kod yazmamızı sağlar.\n\u0026lsquo;any\u0026rsquo; Tipi Bazen katı tip kontrolünden daha fazla esnekliğe ihtiyaç duyarız. İşte bu noktada any tipi devreye girer:\n// \u0026#39;any\u0026#39; tipi ile değişken tanımlama const myComplicatedData: any = \u0026#34;Karmaşık olacağım!\u0026#34;; // Herhangi bir tipe ATANABİLİR - tip kontrolleri kapalı! myComplicatedData = 87; // Çalışır myComplicatedData = \u0026#39;abc...\u0026#39;; // Çalışır myComplicatedData = true; // Çalışır \u0026lsquo;any\u0026rsquo; Ne Zaman Kullanılmalı? Her ne kadar any kullanımından genellikle kaçınmamız gerekse de, meşru kullanım durumları vardır. İşte gerçek bir senaryo:\n// Harici API verisiyle çalışırken function handleAPIResponse(response: any) { // API yanıtının tam yapısını bilmeyebiliriz // özellikle üçüncü taraf API\u0026#39;lerle çalışırken console.log(response.data); // Çalışır console.log(response.status); // Çalışır console.log(response.someField); // Çalışır } // Eski JavaScript koduyla çalışırken declare const oldJavaScriptLibrary: any; // Kütüphaneyi TypeScript hataları olmadan kullanabiliriz oldJavaScriptLibrary.someOldMethod(); any tipinin gerekli olabileceği yaygın senaryolar:\nYanıt yapısının bilinmediği veya dinamik olduğu harici API\u0026rsquo;lerle entegrasyon sırasında JavaScript\u0026rsquo;ten TypeScript\u0026rsquo;e geçiş sürecinde (geçici kullanım) TypeScript tip tanımlamaları olmayan üçüncü taraf kütüphanelerle çalışırken Tipin tahmin edilemeyeceği gerçekten dinamik içeriklerle uğraşırken Ancak unutmayın ki any kullanmak, TypeScript\u0026rsquo;in tip kontrolü avantajlarını ortadan kaldırır. Son çare olarak kullanılmalı ve mümkün olduğunda uygun tipler tanımlanmalıdır.\nPratik Örnek Öğrendiklerimizi birleştiren pratik bir örneğe bakalım:\n// Farklı tiplerle değişkenler oluşturma let kullaniciAdi: string = \u0026#34;Ahmet Yılmaz\u0026#34;; let yas: number = 30; let girisYapildi: boolean = true; // Tip çıkarımı kullanma let sonGirisTarihi = new Date(); // TypeScript Date tipini çıkarır let girisAdedi = 5; // TypeScript number tipini çıkarır // Bu değişkenlerle çalışma function kullaniciBilgileriniGoster() { console.log(`Kullanıcı: ${kullaniciAdi}`); console.log(`Yaş: ${yas}`); console.log(`Giriş Yapıldı: ${girisYapildi}`); console.log(`Son Giriş: ${sonGirisTarihi}`); console.log(`Giriş Sayısı: ${girisAdedi}`); } // TypeScript bu hataları yakalar: kullaniciAdi = 123; // Hata: \u0026#39;number\u0026#39; tipi \u0026#39;string\u0026#39; tipine atanamaz yas = \u0026#34;otuz\u0026#34;; // Hata: \u0026#39;string\u0026#39; tipi \u0026#39;number\u0026#39; tipine atanamaz girisYapildi = \u0026#34;evet\u0026#34;; // Hata: \u0026#39;string\u0026#39; tipi \u0026#39;boolean\u0026#39; tipine atanamaz Bu örnek, TypeScript\u0026rsquo;in gerçek bir uygulama senaryosunda tip güvenliğini nasıl sağladığını ve yaygın tip hatalarını daha oluşmadan nasıl engellediğini gösteriyor.\nBest Practices (En İyi Uygulamalar) Mümkün Olduğunda Tip Çıkarımını Kullanın\nTypeScript tipi doğru çıkarabiliyorsa, tip açıklamaları eklemeyin Bu, kodunuzu daha temiz ve bakımı daha kolay hale getirir \u0026lsquo;any\u0026rsquo; Kullanımından Kaçının\nany kullanmak, TypeScript\u0026rsquo;in tüm avantajlarını ortadan kaldırır Sadece gerçekten gerektiğinde kullanın Gerektiğinde Açık Olun\nTypeScript\u0026rsquo;in çıkarımı yeterli olmadığında tip açıklamaları ekleyin Bu, kod okunabilirliğini artırır ve hataları yakalamaya yardımcı olur Sonuç Bu TypeScript\u0026rsquo;e giriş, tipler ve tip çıkarımının temellerini kapsıyor. TypeScript, JavaScript\u0026rsquo;e güçlü bir tip sistemi ekleyerek daha güvenilir kod yazmamıza yardımcı olur. Başlangıçta ekstra iş gibi görünse de, projeleriniz büyüdükçe ve karmaşıklaştıkça faydaları net bir şekilde ortaya çıkar.\nSerinin 2. bölümünde daha ileri TypeScript konularını inceleyeceğiz. Takipte kalın!\n",
    "tags": ["typescript","javascript"],
    "categories": ["TypeScript"],
    "lang": "tr"
} 