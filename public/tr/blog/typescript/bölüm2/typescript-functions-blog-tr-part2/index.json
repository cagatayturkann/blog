{
    "title": "",
    "permalink": "/tr/blog/typescript/b%C3%B6l%C3%BCm2/typescript-functions-blog-tr-part2/",
    "summary": "\u003ch2 id=\"void-dönüş-tipi\"\u003evoid Dönüş Tipi\u003c/h2\u003e\n\u003cp\u003eBazen fonksiyonlarımız herhangi bir değer döndürmez, sadece bir işlem yaparlar. TypeScript\u0026rsquo;te bunu belirtmek için \u003ccode\u003evoid\u003c/code\u003e tipini kullanırız:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-typescript\" data-lang=\"typescript\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekullaniciyiUyar\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003emesaj\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ealert\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emesaj\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Hiçbir şey döndürmüyoruz\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elogla\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003eany\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003econsole\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// return yazmadık bile\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003evoid\u003c/code\u003e dönüş tipi, fonksiyonun bir değer döndürmeyeceğini söyler. Bu özellikle önemlidir çünkü:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eKodunuzu okuyan diğer geliştiriciler fonksiyondan bir değer beklememeleri gerektiğini bilirler\u003c/li\u003e\n\u003cli\u003eYanlışlıkla bir değer döndürmeye çalışırsanız TypeScript hata verir\u003c/li\u003e\n\u003cli\u003eAPI\u0026rsquo;lerinizi daha net ve anlaşılır hale getirir\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"opsiyonel-parametreler-ve-varsayılan-değerler\"\u003eOpsiyonel Parametreler ve Varsayılan Değerler\u003c/h2\u003e\n\u003cp\u003eTypeScript\u0026rsquo;te parametreleri iki şekilde esnek hale getirebiliriz: opsiyonel parametreler ve varsayılan değerler.\u003c/p\u003e",
    "content": "void Dönüş Tipi Bazen fonksiyonlarımız herhangi bir değer döndürmez, sadece bir işlem yaparlar. TypeScript\u0026rsquo;te bunu belirtmek için void tipini kullanırız:\nconst kullaniciyiUyar = (mesaj: string): void =\u0026gt; { alert(mesaj); // Hiçbir şey döndürmüyoruz } const logla = (data: any): void =\u0026gt; { console.log(data); // return yazmadık bile } void dönüş tipi, fonksiyonun bir değer döndürmeyeceğini söyler. Bu özellikle önemlidir çünkü:\nKodunuzu okuyan diğer geliştiriciler fonksiyondan bir değer beklememeleri gerektiğini bilirler Yanlışlıkla bir değer döndürmeye çalışırsanız TypeScript hata verir API\u0026rsquo;lerinizi daha net ve anlaşılır hale getirir Opsiyonel Parametreler ve Varsayılan Değerler TypeScript\u0026rsquo;te parametreleri iki şekilde esnek hale getirebiliriz: opsiyonel parametreler ve varsayılan değerler.\nOpsiyonel Parametreler Bir parametrenin sonuna ? işareti koyarak o parametrenin opsiyonel olduğunu belirtiriz:\nfunction kisiSelam(isim: string, unvan?: string) { if (unvan) { return `Merhaba ${unvan} ${isim}`; } return `Merhaba ${isim}`; } kisiSelam(\u0026#34;Ahmet\u0026#34;); // Çıktı: \u0026#34;Merhaba Ahmet\u0026#34; kisiSelam(\u0026#34;Ahmet\u0026#34;, \u0026#34;Dr.\u0026#34;); // Çıktı: \u0026#34;Merhaba Dr. Ahmet\u0026#34; Varsayılan Değerler Parametrelere varsayılan değerler atayarak, değer gönderilmediğinde ne kullanılacağını belirleyebiliriz:\nfunction kahveSiparis( kahveTuru: string = \u0026#34;Americano\u0026#34;, boyut: string = \u0026#34;orta\u0026#34;, sut: boolean = false ) { let siparis = `${boyut} boy ${kahveTuru}`; if (sut) siparis += \u0026#34; sütlü\u0026#34;; return siparis; } kahveSiparis(); // \u0026#34;orta boy Americano\u0026#34; kahveSiparis(\u0026#34;Latte\u0026#34;); // \u0026#34;orta boy Latte\u0026#34; kahveSiparis(\u0026#34;Espresso\u0026#34;, \u0026#34;küçük\u0026#34;); // \u0026#34;küçük boy Espresso\u0026#34; kahveSiparis(\u0026#34;Mocha\u0026#34;, \u0026#34;büyük\u0026#34;, true); // \u0026#34;büyük boy Mocha sütlü\u0026#34; Opsiyonel parametreler ve varsayılan değerler arasındaki farklar:\nOpsiyonel Parametreler (?)\nParametre gönderilmezse undefined olur Fonksiyon içinde kontrol etmeniz gerekir Daha esnek ama daha fazla kontrol gerektirir Varsayılan Değerler (= değer)\nParametre gönderilmezse belirlediğiniz değer kullanılır Ekstra kontrol gerektirmez Daha az esnek ama kullanımı daha kolay Önemli Nokta: Parametre Sırası Hem opsiyonel hem zorunlu parametreler kullanırken, zorunlu parametreler her zaman önce gelmelidir:\n// DOĞRU function dogru(zorunlu: string, opsiyonel?: string) {} // YANLIŞ - TypeScript hata verir function yanlis(opsiyonel?: string, zorunlu: string) {} // Hata! Bu kural varsayılan değerler için de geçerlidir:\n// DOĞRU function dogru2(zorunlu: string, varsayilan: string = \u0026#34;default\u0026#34;) {} // YANLIŞ function yanlis2(varsayilan: string = \u0026#34;default\u0026#34;, zorunlu: string) {} // Hata! Bu kurala uymak, kodunuzun daha mantıklı ve anlaşılır olmasını sağlar. Ayrıca JavaScript\u0026rsquo;in fonksiyon çağrılarını nasıl işlediğiyle de uyumludur.\n",
    "tags": null,
    "categories": null,
    "lang": "tr"
} 