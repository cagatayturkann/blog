{
    "title": "",
    "permalink": "/tr/blog/typescript/b%C3%B6l%C3%BCm2/typescript-functions-blog-tr-part3/",
    "summary": "\u003ch2 id=\"anonim-fonksiyonlar-ve-tip-çıkarımı\"\u003eAnonim Fonksiyonlar ve Tip Çıkarımı\u003c/h2\u003e\n\u003cp\u003eTypeScript\u0026rsquo;in en güçlü özelliklerinden biri, tipleri otomatik olarak çıkarabilme yeteneğidir. Bu özellikle anonim fonksiyonlarda çok kullanışlıdır:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-typescript\" data-lang=\"typescript\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esayilar\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// TypeScript otomatik olarak \u0026#39;sayi\u0026#39; parametresinin number olduğunu anlar\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003esayilar\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eforEach\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003esayi\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003econsole\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003esayi\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003etoFixed\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e));  \u003cspan style=\"color:#75715e\"\u003e// TypeScript bunu güvenli buluyor\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Dizi metotlarında da tip çıkarımı çalışır\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekareler\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esayilar\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003esayi\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esayi\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esayi\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// kareler dizisinin tipi number[] olarak çıkarılır\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTip çıkarımı kod yazarken işimizi kolaylaştırır, ancak her zaman tip belirtmemek kodunuzu daha az okunabilir hale getirebilir. Bu yüzden dengeyi iyi kurmak önemlidir.\u003c/p\u003e",
    "content": "Anonim Fonksiyonlar ve Tip Çıkarımı TypeScript\u0026rsquo;in en güçlü özelliklerinden biri, tipleri otomatik olarak çıkarabilme yeteneğidir. Bu özellikle anonim fonksiyonlarda çok kullanışlıdır:\nconst sayilar = [1, 2, 3, 4, 5]; // TypeScript otomatik olarak \u0026#39;sayi\u0026#39; parametresinin number olduğunu anlar sayilar.forEach(sayi =\u0026gt; { console.log(sayi.toFixed(2)); // TypeScript bunu güvenli buluyor }); // Dizi metotlarında da tip çıkarımı çalışır const kareler = sayilar.map(sayi =\u0026gt; sayi * sayi); // kareler dizisinin tipi number[] olarak çıkarılır Tip çıkarımı kod yazarken işimizi kolaylaştırır, ancak her zaman tip belirtmemek kodunuzu daha az okunabilir hale getirebilir. Bu yüzden dengeyi iyi kurmak önemlidir.\nnever Tipi never tipi, TypeScript\u0026rsquo;te özel bir tiptir ve asla gerçekleşmeyecek durumları temsil eder. İki ana kullanım senaryosu vardır:\nSonsuz Döngüler: Asla tamamlanmayan fonksiyonlar function sonsuzdDongu(): never { while (true) { console.log(\u0026#34;Bu fonksiyon asla bitmeyecek!\u0026#34;); } } function sonsuzOzyineleme(): never { return sonsuzOzyineleme(); } Her Zaman Hata Fırlatan Fonksiyonlar: function hataFirlat(mesaj: string): never { throw new Error(mesaj); } function hataKontrol(deger: string | number) { if (typeof deger === \u0026#34;string\u0026#34;) { console.log(\u0026#34;Bu bir string:\u0026#34;, deger); } else if (typeof deger === \u0026#34;number\u0026#34;) { console.log(\u0026#34;Bu bir number:\u0026#34;, deger); } else { // Bu noktada deger tipi \u0026#39;never\u0026#39; olur // Çünkü buraya ulaşmak imkansızdır hataFirlat(\u0026#34;Bu asla olmamalı!\u0026#34;); } } never ile void arasındaki farkı anlamak önemlidir:\nvoid: Fonksiyon bir değer döndürmez never: Fonksiyon asla tamamlanmaz veya her zaman bir hata fırlatır Fonksiyon Aşırı Yüklemesi (Function Overloads) TypeScript\u0026rsquo;te bir fonksiyonu farklı parametre tipleriyle kullanmak istediğimizde fonksiyon aşırı yüklemesini kullanabiliriz:\n// Aşırı yükleme imzaları function birlestir(a: string, b: string): string; function birlestir(a: number, b: number): number; // Gerçek implementasyon function birlestir(a: string | number, b: string | number): string | number { if (typeof a === \u0026#34;string\u0026#34; \u0026amp;\u0026amp; typeof b === \u0026#34;string\u0026#34;) { return a.concat(b); } if (typeof a === \u0026#34;number\u0026#34; \u0026amp;\u0026amp; typeof b === \u0026#34;number\u0026#34;) { return a + b; } throw new Error(\u0026#34;Parametreler aynı tipte olmalıdır!\u0026#34;); } console.log(birlestir(\u0026#34;Merhaba, \u0026#34;, \u0026#34;Dünya\u0026#34;)); // \u0026#34;Merhaba, Dünya\u0026#34; console.log(birlestir(5, 10)); // 15 // birlestir(\u0026#34;5\u0026#34;, 10); // Hata! Bu kombinasyon tanımlı değil Fonksiyon aşırı yüklemesi sayesinde:\nAynı fonksiyonu farklı parametre tipleriyle kullanabiliriz Her kombinasyon için doğru dönüş tipini belirleyebiliriz TypeScript hangi kombinasyonların geçerli olduğunu kontrol eder ",
    "tags": null,
    "categories": null,
    "lang": "tr"
} 