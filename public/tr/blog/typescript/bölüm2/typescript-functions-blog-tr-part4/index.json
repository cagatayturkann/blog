{
    "title": "",
    "permalink": "/tr/blog/typescript/b%C3%B6l%C3%BCm2/typescript-functions-blog-tr-part4/",
    "summary": "\u003ch2 id=\"en-iyi-uygulamalar\"\u003eEn Ä°yi Uygulamalar\u003c/h2\u003e\n\u003cp\u003eTypeScript fonksiyonlarÄ± yazarken izlemeniz gereken bazÄ± Ã¶nemli pratikler vardÄ±r. Ä°ÅŸte bu pratikler ve nedenleri:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eHer Zaman Parametre Tiplerini Belirtin\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-typescript\" data-lang=\"typescript\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// KÃ–TÃœ\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekotu\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eisim\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e`Merhaba \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eisim\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Ä°YÄ°\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eiyi\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eisim\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e`Merhaba \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eisim\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTip belirtmek kodunuzu daha okunabilir yapar ve hatalarÄ± Ã¶nler.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDÃ¶nÃ¼ÅŸ Tiplerini DÃ¼ÅŸÃ¼nÃ¼n\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-typescript\" data-lang=\"typescript\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Otomatik Ã§Ä±karÄ±m bazen yeterlidir\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etopla\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003enumber\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003enumber\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Ama karmaÅŸÄ±k fonksiyonlarda dÃ¶nÃ¼ÅŸ tipini belirtmek daha iyidir\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003everiIsle\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003eany\u003c/span\u003e[])\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eProcessedData\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// KarmaÅŸÄ±k iÅŸlemler...\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eislenmisSonuc\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eOpsiyonel Parametreleri Sona Koyun\u003c/strong\u003e\u003c/p\u003e",
    "content": "En Ä°yi Uygulamalar TypeScript fonksiyonlarÄ± yazarken izlemeniz gereken bazÄ± Ã¶nemli pratikler vardÄ±r. Ä°ÅŸte bu pratikler ve nedenleri:\nHer Zaman Parametre Tiplerini Belirtin\n// KÃ–TÃœ function kotu(isim) { return `Merhaba ${isim}`; } // Ä°YÄ° function iyi(isim: string): string { return `Merhaba ${isim}`; } Tip belirtmek kodunuzu daha okunabilir yapar ve hatalarÄ± Ã¶nler.\nDÃ¶nÃ¼ÅŸ Tiplerini DÃ¼ÅŸÃ¼nÃ¼n\n// Otomatik Ã§Ä±karÄ±m bazen yeterlidir const topla = (a: number, b: number) =\u0026gt; a + b; // Ama karmaÅŸÄ±k fonksiyonlarda dÃ¶nÃ¼ÅŸ tipini belirtmek daha iyidir function veriIsle(data: any[]): ProcessedData { // KarmaÅŸÄ±k iÅŸlemler... return islenmisSonuc; } Opsiyonel Parametreleri Sona Koyun\n// KÃ–TÃœ function kotu(opsiyonel?: string, zorunlu: string) {} // Ä°YÄ° function iyi(zorunlu: string, opsiyonel?: string) {} any Tipinden KaÃ§Ä±nÄ±n\n// KÃ–TÃœ function herhangiVeri(data: any) { return data.birsey(); // Tehlikeli! } // Ä°YÄ° function tipliVeri\u0026lt;T\u0026gt;(data: T) { // Tip gÃ¼venli iÅŸlemler } Fonksiyon DokÃ¼mantasyonu YazÄ±n\n/** * Verilen sayÄ±larÄ± toplar ve sonucu dÃ¶ndÃ¼rÃ¼r * @param sayilar - Toplanacak sayÄ± dizisi * @returns Toplam deÄŸer */ function topla(...sayilar: number[]): number { return sayilar.reduce((a, b) =\u0026gt; a + b, 0); } HÄ±zlÄ± BaÅŸvuru Ä°ÅŸte TypeScript\u0026rsquo;te en sÄ±k kullanÄ±lan fonksiyon yapÄ±larÄ±nÄ±n hÄ±zlÄ± bir Ã¶zeti:\n1. Temel Fonksiyon TanÄ±mlamalarÄ± // Normal fonksiyon function selamla(isim: string): string { return `Merhaba ${isim}`; } // Ok fonksiyonu const selamla2 = (isim: string): string =\u0026gt; `Merhaba ${isim}`; 2. Parametre Ã‡eÅŸitleri // Opsiyonel parametre function log(mesaj: string, seviye?: string) {} // VarsayÄ±lan deÄŸerli parametre function baglan(url: string = \u0026#34;localhost\u0026#34;) {} // Rest parametresi function toplam(...sayilar: number[]): number { return sayilar.reduce((a, b) =\u0026gt; a + b, 0); } 3. DÃ¶nÃ¼ÅŸ Tipleri // DeÄŸer dÃ¶ndÃ¼ren function topla(a: number, b: number): number { return a + b; } // Void dÃ¶nÃ¼ÅŸ function logla(mesaj: string): void { console.log(mesaj); } // Never dÃ¶nÃ¼ÅŸ function hataFirlat(mesaj: string): never { throw new Error(mesaj); } 4. Fonksiyon Tipleri // Fonksiyon tipi tanÄ±mlama type MatematikIslemi = (a: number, b: number) =\u0026gt; number; // Fonksiyon tipi kullanma const toplama: MatematikIslemi = (a, b) =\u0026gt; a + b; const cikarma: MatematikIslemi = (a, b) =\u0026gt; a - b; SonuÃ§ TypeScript\u0026rsquo;in fonksiyonlar iÃ§in sunduÄŸu tip sistemi, JavaScript geliÅŸtirmede Ã§ok deÄŸerli bir araÃ§tÄ±r. Tip gÃ¼venliÄŸi sayesinde:\nHatalarÄ± erken yakalarsÄ±nÄ±z Kodunuz daha okunabilir olur IDE desteÄŸi daha iyi Ã§alÄ±ÅŸÄ±r Refactoring yapmak kolaylaÅŸÄ±r Bu Ã¶zelliklerin hepsi bir araya geldiÄŸinde, daha gÃ¼venilir ve bakÄ±mÄ± kolay uygulamalar geliÅŸtirmenize yardÄ±mcÄ± olur. Bir sonraki yazÄ±mÄ±zda TypeScript\u0026rsquo;in baÅŸka bir Ã¶nemli Ã¶zelliÄŸi olan Interfaces (ArayÃ¼zler) konusunu inceleyeceÄŸiz.\nFonksiyonlarla ilgili sorularÄ±nÄ±z varsa, yorum bÃ¶lÃ¼mÃ¼nden sorabilirsiniz. Mutlu kodlamalar! ğŸš€\n",
    "tags": null,
    "categories": null,
    "lang": "tr"
} 