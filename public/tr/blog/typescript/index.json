{
    "title": "App Store Connect API iÃ§in JWT Token NasÄ±l OluÅŸturulur?",
    "permalink": "/tr/blog/typescript/",
    "summary": "App Store Connect API, App Store Connect\u0026rsquo;te gerÃ§ekleÅŸtirdiÄŸiniz iÅŸlemleri otomatikleÅŸtiren bir REST API\u0026rsquo;dir. Bu API, geliÅŸtiricilere uygulama gÃ¶nderme ve gÃ¼ncelleme iÅŸlemlerinden, iÃ§ uygulama satÄ±n almalarÄ±nÄ± yÃ¶netmeye, uygulama performansÄ±nÄ± ve kullanÄ±cÄ± etkileÅŸimini..",
    "content": "\\\nTypeScript Temelleri: TÃ¼rler, Fonksiyonlar ve Daha FazlasÄ± TypeScript\u0026rsquo;in temel konseptlerini Ã¶ÄŸrenerek kodunuzu daha gÃ¼venli ve okunabilir hale getirin.\n1. TypeScript Nedir? TypeScript, JavaScript\u0026rsquo;e statik tÃ¼rler ekleyen bir Ã¼st dil (superset) olarak tanÄ±mlanabilir. GeliÅŸtirme aÅŸamasÄ±nda tÃ¼r denetimi yaparak hatalarÄ± erken yakalamanÄ±zÄ± saÄŸlar, ancak derlendiÄŸinde saf JavaScript\u0026rsquo;e dÃ¶nÃ¼ÅŸÃ¼r.\n// JavaScript\u0026#39;te bir deÄŸiÅŸken let age = 25; // TypeScript\u0026#39;te tÃ¼r belirterek let age: number = 25; TÃ¼r ek aÃ§Ä±klamalarÄ± (: number gibi), deÄŸiÅŸkenlerinizin hangi tÃ¼rde veri tutacaÄŸÄ±nÄ± belirler.\n2. Temel TÃ¼rler (Primitive Types) TypeScript, JavaScript\u0026rsquo;in temel tÃ¼rlerini geniÅŸletir:\nString, Number, Boolean let name: string = \u0026#34;Ahmet\u0026#34;; let age: number = 30; let isActive: boolean = true; TÃ¼r belirtilmiÅŸ deÄŸiÅŸkenlere farklÄ± tÃ¼rde deÄŸer atanamaz:\nage = \u0026#34;30\u0026#34;; // HATA: \u0026#39;string\u0026#39; tÃ¼rÃ¼ \u0026#39;number\u0026#39;a atanamaz. Ã–zel TÃ¼rler any: TÃ¼r denetimini devre dÄ±ÅŸÄ± bÄ±rakÄ±r (kaÃ§Ä±ÅŸ deliÄŸi). let dynamicValue: any = \u0026#34;Merhaba\u0026#34;; dynamicValue = 42; // Sorun yok! void: Bir fonksiyonun hiÃ§bir ÅŸey dÃ¶ndÃ¼rmediÄŸini belirtir. function logMessage(): void { console.log(\u0026#34;Mesaj loglandÄ±!\u0026#34;); } never: HiÃ§bir zaman sonlanmayan fonksiyonlar iÃ§in kullanÄ±lÄ±r. function throwError(message: string): never { throw new Error(message); } 3. Nesne ve Dizi TÃ¼rleri Nesneler Nesnelerin ÅŸeklini aÃ§Ä±kÃ§a tanÄ±mlayabilirsiniz:\ntype User = { id: number; name: string; }; const user: User = { id: 1, name: \u0026#34;AyÅŸe\u0026#34; }; Opsiyonel Ã–zellikler: ? ile belirtilir.\ntype Profile = { username: string; age?: number; // Zorunlu deÄŸil }; Diziler Dizi tÃ¼rleri, kÃ¶ÅŸeli parantezler ([]) veya Array\u0026lt;T\u0026gt; ile tanÄ±mlanÄ±r:\nlet numbers: number[] = [1, 2, 3]; let names: Array\u0026lt;string\u0026gt; = [\u0026#34;Ali\u0026#34;, \u0026#34;Zeynep\u0026#34;]; 4. Fonksiyon TÃ¼rleri Parametre ve DÃ¶nÃ¼ÅŸ TÃ¼rleri function add(x: number, y: number): number { return x + y; } add(5, 3); // 8 add(\u0026#34;5\u0026#34;, 3); // HATA: Parametre tÃ¼rÃ¼ uyuÅŸmuyor. Anonim Fonksiyonlarda TÃ¼r Ã‡Ä±karÄ±mÄ± TypeScript, baÄŸlamdan tÃ¼rleri otomatik Ã§Ä±karabilir:\nconst numbers = [1, 2, 3]; numbers.forEach((num) =\u0026gt; { console.log(num.toUpperCase()); // HATA: \u0026#39;number\u0026#39; tÃ¼rÃ¼nde toUpperCase yok! }); 5. Union TÃ¼rleri ve TÃ¼r Daraltma Union TÃ¼rleri Bir deÄŸiÅŸkenin birden fazla tÃ¼r alabilmesini saÄŸlar:\nfunction printId(id: number | string) { console.log(\u0026#34;ID:\u0026#34;, id); } printId(101); // GeÃ§erli printId(\u0026#34;abc123\u0026#34;); // GeÃ§erli printId(true); // HATA TÃ¼r Daraltma (Narrowing) Union tÃ¼rlerle Ã§alÄ±ÅŸÄ±rken tÃ¼r kontrolÃ¼ yapÄ±n:\nfunction processValue(value: string | number) { if (typeof value === \u0026#34;string\u0026#34;) { console.log(value.toUpperCase()); } else { console.log(value.toFixed(2)); } } 6. TÃ¼r Assertion ve Literal TÃ¼rler TÃ¼r Assertion DeÄŸiÅŸken tÃ¼rÃ¼nÃ¼ zorla belirtmek iÃ§in:\nconst element = document.getElementById(\u0026#34;myInput\u0026#34;) as HTMLInputElement; Literal TÃ¼rler Belirli deÄŸerleri kabul eden tÃ¼rler:\ntype Status = \u0026#34;success\u0026#34; | \u0026#34;error\u0026#34; | \u0026#34;pending\u0026#34;; function setStatus(status: Status) { // ... } setStatus(\u0026#34;success\u0026#34;); // GeÃ§erli setStatus(\u0026#34;warning\u0026#34;); // HATA SonuÃ§ TypeScript, tÃ¼r sistemiyle kodunuzu daha gÃ¼venli ve okunabilir hale getirir. Bu rehberde temel tÃ¼rler, fonksiyonlar, nesneler ve union tÃ¼rler gibi kritik konularÄ± ele aldÄ±k.\nÃ–rnek projelerle pratik yaparak bu konseptleri pekiÅŸtirmeyi unutmayÄ±n! ğŸš€\nğŸ”— Ä°leri Okuma: TypeScript Resmi DokÃ¼manlarÄ±\n",
    "tags": ["jwt","app-store","api"],
    "categories": ["GeliÅŸtirme","iOS"],
    "lang": "tr"
} 