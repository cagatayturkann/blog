{
    "title": "Fastify ile RESTful API Oluşturma",
    "permalink": "/blog/tr/fastify-ile-rest-api-olusturma/",
    "summary": "Fastify, Node.js için yüksek performans ve düşük kaynak tüketimi sağlamaya odaklanan modern bir web framework\u0026rsquo;tür. Bu yazıda Fastify\u0026rsquo;ın ne olduğunu, nasıl kullanıldığını ve en iyi uygulama önerilerini detaylı olarak anlatacağım.",
    "content": "Herkese merhabalar! Bu yazımda sizlere Node.js için hızlı ve düşük kaynak tüketen bir web framework olan Fastify\u0026rsquo;ı anlatacağım. Birlikte basit bir TODO API\u0026rsquo;si oluşturacağız ve Fastify\u0026rsquo;ın özelliklerinin geliştirme sürecinizi nasıl daha verimli hale getirebileceğini açıklayacağım.\nBu projenin tüm kaynak koduna GitHub üzerinden ulaşabilirsiniz: fastify-nodejs-restful-api\nFastify Nedir ve Neden Kullanmalıyız? Fastify, Node.js için geliştirilmiş, yüksek performansa ve düşük kaynak kullanımına odaklanan modern bir web framework\u0026rsquo;tür. Node.js geliştiricilerinin çoğu Express.js\u0026rsquo;e aşina olsa da, Fastify bazı önemli avantajlar sunuyor:\nExpress\u0026rsquo;e göre 2 kata kadar daha hızlı Dahili şema doğrulama sistemi Otomatik Swagger dokümantasyonu Plugin tabanlı mimari Projemizi Oluşturalım Öncelikle projemizi kuralım. İlk olarak bazı bağımlılıkları yüklememiz gerekiyor. Yeni bir dizin oluşturun ve şu komutları çalıştırın:\nmkdir fastify-todo-api cd fastify-todo-api npm init -y Şimdi ihtiyacımız olan paketleri yükleyelim:\n{ \u0026#34;dependencies\u0026#34;: { \u0026#34;fastify\u0026#34;: \u0026#34;^3.29.0\u0026#34;, \u0026#34;fastify-swagger\u0026#34;: \u0026#34;^5.2.0\u0026#34;, \u0026#34;uuid\u0026#34;: \u0026#34;^8.3.2\u0026#34; }, \u0026#34;devDependencies\u0026#34;: { \u0026#34;nodemon\u0026#34;: \u0026#34;^2.0.16\u0026#34; } } Proje Yapısı Kodlamaya başlamadan önce proje yapımızı düzenleyelim. Temiz ve bakımı kolay bir yaklaşım izleyeceğiz:\nfastify-todo-api/ ├── app.js # Ana sunucu dosyası ├── items.js # Veri deposu ├── routes/ │ └── todoRouter.js # Route tanımlamaları └── controllers/ └── todoController.js # İstek işleyicileri İlk Fastify Sunucumuzu Oluşturalım Ana sunucu dosyamızla (app.js) başlayalım. İşte temel bir Fastify sunucusunu nasıl kurarız:\nconst fastify = require(\u0026#39;fastify\u0026#39;)({ logger: true }); // Swagger dokümantasyonunu ayarlıyoruz fastify.register(require(\u0026#39;fastify-swagger\u0026#39;), { exposeRoute: true, routePrefix: \u0026#39;/docs\u0026#39;, swagger: { info: { title: \u0026#39;fastify-api\u0026#39; }, }, }); // Route\u0026#39;larımızı kaydediyoruz fastify.register(require(\u0026#39;./routes/todoRouter\u0026#39;)); const PORT = 5000; const start = async () =\u0026gt; { try { await fastify.listen(PORT); } catch (error) { fastify.log.error(error); process.exit(1); } }; start(); Bu kodda neler oluyor?\nLoglama özelliği etkin bir Fastify örneği oluşturuyoruz Swagger dokümantasyonunu ayarlıyoruz (/docs adresinden erişilebilir) Route\u0026rsquo;larımızı Fastify\u0026rsquo;ın plugin sistemi ile kaydediyoruz Sunucuyu 5000 portunda başlatıyoruz Fastify\u0026rsquo;ın Şema Doğrulama Sistemini Anlayalım Fastify\u0026rsquo;ın en güçlü özelliklerinden biri şema doğrulama sistemidir. todoRouter.js dosyasında nasıl kullanacağımıza bakalım:\n// Önce bir TODO öğesinin nasıl görüneceğini tanımlıyoruz const Item = { type: \u0026#39;object\u0026#39;, properties: { id: { type: \u0026#39;string\u0026#39; }, name: { type: \u0026#39;string\u0026#39; }, }, }; // Sonra endpoint\u0026#39;lerimiz için şemalar oluşturuyoruz const getItemsOpts = { schema: { response: { 200: { type: \u0026#39;array\u0026#39;, items: Item, }, }, }, handler: getItems, }; Bu neden özel?\nFastify otomatik olarak tüm gelen ve giden verileri doğrular Bu şemalardan Swagger dokümantasyonu oluşturur Serileştirmeyi optimize ederek performansı artırır Hataları handler\u0026rsquo;lara ulaşmadan yakalar Controller\u0026rsquo;larımızı Oluşturalım Şimdi todoController.js dosyasında istekleri nasıl işleyeceğimize bakalım:\nlet items = require(\u0026#39;../items\u0026#39;); const { v4: uuidv4 } = require(\u0026#39;uuid\u0026#39;); // Tüm öğeleri getir const getItems = (req, reply) =\u0026gt; { reply.send(items); }; // Yeni öğe oluştur const addItem = (req, reply) =\u0026gt; { const { name } = req.body; const item = { id: uuidv4(), name, }; items = [...items, item]; reply.code(201).send(item); }; Fastify\u0026rsquo;ın yanıt işlemeyi nasıl kolaylaştırdığına dikkat edin:\nContent-Type başlıklarını manuel ayarlamaya gerek yok Durum kodları ve yanıt gönderme için method chaining Otomatik yanıt serileştirme API\u0026rsquo;mizi Test Edelim Her şeyi ayarladığımıza göre, API\u0026rsquo;mizi test edelim. curl veya herhangi bir API test aracı kullanabilirsiniz:\n# Tüm öğeleri al curl http://localhost:5000/items # Yeni öğe oluştur curl -X POST \\ http://localhost:5000/items \\ -H \u0026#39;Content-Type: application/json\u0026#39; \\ -d \u0026#39;{\u0026#34;name\u0026#34;:\u0026#34;Fastify Öğren\u0026#34;}\u0026#39; Bilmeniz Gereken Performans Özellikleri Fastify tesadüfen hızlı değil. İşte neden bu kadar iyi performans gösteriyor:\nŞema Tabanlı Serileştirme\nDaha hızlı doğrulama için şemaları önceden derler JSON serileştirmeyi optimize eder İşlem yükünü azaltır Verimli Yönlendirme\nRoute eşleştirme için radix tree kullanır Regex tabanlı yönlendirmeden daha hızlıdır Optimize edilmiş parametre işleme Hafif Çekirdek\nMinimum temel yük Özellik eklemek için plugin sistemi Verimli bellek kullanımı Önerdiğim En İyi Uygulamalar Fastify ile çalıştıktan sonra, işime yarayan bazı pratikler:\nHer Zaman Şema Kullanın\nfastify.get(\u0026#39;/items\u0026#39;, { schema: { response: { 200: itemSchema } } }) Plugin\u0026rsquo;lerle Organize Edin\nfastify.register(require(\u0026#39;./routes/items\u0026#39;)) fastify.register(require(\u0026#39;./routes/users\u0026#39;)) Hataları Düzgün Yönetin\nfastify.setErrorHandler(function (error, request, reply) { reply.status(error.statusCode || 500).send({error: error.message}) }) Sonuç Fastify, yüksek performanslı Node.js API\u0026rsquo;leri oluşturmak için mükemmel bir temel sağlıyor. Şema doğrulama ve swagger dokümantasyonu gibi dahili özellikleri, onu modern web uygulamaları için harika bir seçim haline getiriyor. Gelecek yazılarımda, daha gelişmiş Fastify özelliklerini ve bunları production ortamında nasıl etkili bir şekilde kullanabileceğimizi anlatacağım. Okuduğunuz için teşekkürler!\nTüm bu özellikler hakkında daha detaylı bilgi için Fastify dokümantasyonunu incelemeyi unutmayın.\n",
    "tags": ["nodejs","fastify"],
    "categories": ["Node.js"],
    "lang": "tr"
} 